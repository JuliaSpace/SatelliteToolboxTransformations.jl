var documenterSearchIndex = {"docs":
[{"location":"man/ecef_local_frames/#ECEF-and-Local-frames","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"","category":"section"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"CurrentModule = SatelliteToolboxTransformations","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"using SatelliteToolboxTransformations","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"There are two functions that can be used to convert a vector between the Earth-Centered, Earth-Fixed (ECEF) reference frame and a local reference frame.  Currently, only the NED local frame is supported. This frame is defined as follows at the observer position:","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"The X axis points toward the North;\nThe Y axis points toward the East; and\nThe Z axis points downward.","category":"page"},{"location":"man/ecef_local_frames/#Converting-from-ECEF-to-NED","page":"ECEF and Local frames","title":"Converting from ECEF to NED","text":"","category":"section"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"We can convert a vector in ECEF to NED using the following function:","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"ecef_to_ned(r_ecef::AbstractVector, lat::Number, lon::Number, h::Number; translate::Bool = false) -> SVector{3}","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"where a vector r_ecef represented in the Earth-Centered, Earth-Fixed (ECEF) frame is converted to a vector represented in the local reference frame NED (North, East, Down) at the geodetic position lat [rad], lon [rad], and h [m].","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"If translate is false, this function computes only the rotation between ECEF and NED. Otherwise, it will also translate the vector considering the distance between the Earth's center and NED origin.","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"r_ecef = [\n     2.7189672586353812e6\n    -3.608191420727525e6\n    -4.487701255149731e6\n];\n\necef_to_ned(r_ecef, -45 |> deg2rad, -53 |> deg2rad, 500; translate = true)\n \necef_to_ned(r_ecef, -45 |> deg2rad, -53 |> deg2rad, 500; translate = false)","category":"page"},{"location":"man/ecef_local_frames/#Converting-from-NED-to-ECEF","page":"ECEF and Local frames","title":"Converting from NED to ECEF","text":"","category":"section"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"We can convert a vector in NED to ECEF using the following function:","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"ned_to_ecef(r_ned::AbstractVector, lat::Number, lon::Number, h::Number; translate::Bool = false) -> SVector{3}","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"where a vector r_ned represented in the local reference frame NED (North, East, Down) at the geodetic position lat [rad], lon [rad], and h [m] is converted to the Earth-Centered, Earth-Fixed (ECEF) frame.","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"If translate is false, then this function computes only the rotation between NED and ECEF. Otherwise, it will also translate the vector considering the distance between the Earth's center and NED origin.","category":"page"},{"location":"man/ecef_local_frames/","page":"ECEF and Local frames","title":"ECEF and Local frames","text":"ned_to_ecef([1, 0, 0], -45 |> deg2rad, -53 |> deg2rad, 500; translate = true)\n\nned_to_ecef([1, 0, 0], -45 |> deg2rad, -53 |> deg2rad, 500; translate = false)","category":"page"},{"location":"lib/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Documentation for SatelliteToolboxTransformations.jl.","category":"page"},{"location":"lib/library/","page":"Library","title":"Library","text":"Modules = [SatelliteToolboxTransformations]","category":"page"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECEFs","page":"Library","title":"SatelliteToolboxTransformations.T_ECEFs","text":"T_ECEFs\n\nUnion of all Earth-Centered Earth-Fixed (ECEF) frames supported by the IAU-76/FK5 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECEFs_IAU_2006","page":"Library","title":"SatelliteToolboxTransformations.T_ECEFs_IAU_2006","text":"T_ECEFs_IAU_2006\n\nUnion of all Earth-Centered Earth-Fixed (ECEF) frames supported by IAU-2006/2010 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs","text":"T_ECIs\n\nUnion of all Earth-Centered Inertial (ECI) frames supported by the IAU-76/FK5 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs_IAU_2006","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs_IAU_2006","text":"T_ECIs_IAU_2006\n\nUnion of all Earth-Centered Inertial (ECI) frames supported by IAU-2006/2010 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs_IAU_2006_CIO","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs_IAU_2006_CIO","text":"T_ECIs_IAU_2006_CIO\n\nUnion of all Earth-Centered Inertial (ECI) frames supported by CIO-based IAU-2006/2010 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs_IAU_2006_Equinox","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs_IAU_2006_Equinox","text":"T_ECIs_IAU_2006_Equinox\n\nUnion of all Earth-Centered Inertial (ECI) frames supported by Equinox-based IAU-2006/2010 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs_IAU_2006_Equinox_of_date","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs_IAU_2006_Equinox_of_date","text":"T_ECIs_IAU_2006_Equinox_of_date\n\nUnion of all of date Earth-Centered Inertial (ECI) frames supported by the equinox-based IAU-2006/2010 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ECIs_of_date","page":"Library","title":"SatelliteToolboxTransformations.T_ECIs_of_date","text":"T_ECIs_of_date\n\nUnion of all of date Earth-Centered Inertial (ECI) frames supported by the IAU-76/FK5 theory.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.T_ROT","page":"Library","title":"SatelliteToolboxTransformations.T_ROT","text":"T_ROT\n\nUnion of all supported rotation descriptions.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.EopIau1980","page":"Library","title":"SatelliteToolboxTransformations.EopIau1980","text":"EopIau1980{T}\n\nEarth orientation parameters for the model IAU 1980.\n\nnote: Note\nEach field will be an AbstractInterpolation indexed by the Julian Day.  Hence, if one wants to obtain, for example, the X component of the polar motion with respect to the crust at 19 June 2018, the following can be used:x[DateTime(2018, 6, 19, 0, 0, 0) |> datetime2julian]\n\nFields\n\nx, y: Polar motion with respect to the crust [arcsec].\nΔut1_utc: Irregularities of the rotation angle [s].\nlod: Length of day offset [ms].\nδΔψ, δΔϵ: Celestial pole offsets referred to the model IAU1980 [milliarcsec].\n*_error: Errors in the components [same unit as the component].\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.EopIau2000A","page":"Library","title":"SatelliteToolboxTransformations.EopIau2000A","text":"EopIau2000A{T}\n\nEarth orientation parameters for the model IAU 2000A.\n\nnote: Note\nEach field will be an AbstractInterpolation indexed by the Julian Day.  Hence, if one want to obtain, for example, the X component of the polar motion with respect to the crust at 19 June 2018, the following can be used:x[DateTime(2018, 6, 19, 0, 0, 0) |> datetime2julian]\n\nFields\n\nx, y: Polar motion with respect to the crust [arcsec].\nΔut1_utc: Irregularities of the rotation angle [s].\nlod: Length of day offset [ms].\nδx, δy: Celestial pole offsets referred to the model IAU2000A [milliarcsec].\n*_error: Errors in the components [same unit as the component].\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxTransformations.cio_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.cio_iau2006","text":"cio_iau2006(jd_tt::Number) -> Float64, Float64, Float64\n\nCompute the coordinates X and Y of the Celestial Intermediate Pole (CIP) with respect to the Geocentric Celestial Reference Frame (GCRF), and the CIO locator s. The algorithm is based on the IAU-2006 theory.\n\nThe CIO locator s provides the position of the CIO on the Equator of the CIP corresponding to the kinematical definition of the non-rotation origin in the GCRS when the CIP is moving with respect to the GCRS between the reference epoch and the epoch due to precession and nutation [1](p. 214).\n\nReturns\n\nFloat64: The coordinate X of the CIP w.r.t. the GCRF.\nFloat64: The coordinate Y of the CIP w.r.t. the GCRF.\nFloat64: The CIO locator s.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.compute_δΔϵ_δΔψ-Tuple{EopIau2000A, Number}","page":"Library","title":"SatelliteToolboxTransformations.compute_δΔϵ_δΔψ","text":"compute_δϵ_δψ(eop_iau2000a::EopIau2000A, JD::Number) -> (Float64, Float64)\n\nCompute the celestial pole offsets in obliquity (δΔϵ_2000) and longitude (δΔΨ_2000) [arcsec] given the IERS EOP IAU 2000A eop_iau2000a.\n\nThis function obtains those values by converting the celestial pole offsets with respect to the GCRS (δx and δy). These values are necessary in the equinox-based IAU-2006 theory.\n\nThe algorithm was obtained from [1](eq. 5.25) and [2](DPSIDEPS2000_DXDY2000).\n\nReferences\n\n[1]: IERS (2010). Transformation between the International Terrestrial Reference   System and the Geocentric Celestial Reference System. IERS Technical Note No. 36,   Chapter 5.\n[2]: ftp://hpiers.obspm.fr/eop-pc/models/uai2000.package\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.ecef_to_geocentric-Tuple{AbstractVector}","page":"Library","title":"SatelliteToolboxTransformations.ecef_to_geocentric","text":"ecef_to_geocentric(r_e::AbstractVector{T}) -> NTuple{3, T}\n\nConvert the vector r_e represented in the Earth-Centered, Earth-Fixed (ECEF) reference frame into geocentric coordinates (geocentric latitude, longitude, and distance from Earth's center).\n\nReturns\n\nT: Geocentric latitude [rad] ∈ [-π / 2, π / 2].\nT: Longitude [rad] ∈ [-π , π].\nT: Distance from Earth's center [m].\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.ecef_to_geodetic-Union{Tuple{AbstractVector}, Tuple{T}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.ecef_to_geodetic","text":"ecef_to_geodetic(r_e::AbstractVector; ellipsoid::Ellipsoid{T} = WGS84_ELLIPSOID) where T<:Number -> NTuple{3, T}\n\nConvert the vector r_e [m] represented in the Earth-Centered, Earth-Fixed (ECEF) reference frame into Geodetic coordinates for a custom target ellipsoid (defaults to WGS-84).\n\ninfo: Info\nThe algorithm is based in [1].\n\nReturns\n\nT: Latitude [rad].\nT: Longitude [rad].\nT: Altitude [m].\n\nReference\n\n[1]: mu-blox ag (1999). Datum Transformations of GPS Positions. Application Note.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.ecef_to_ned-Union{Tuple{T4}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, T2, T3, T4}} where {T1<:Number, T2<:Number, T3<:Number, T4<:Number}","page":"Library","title":"SatelliteToolboxTransformations.ecef_to_ned","text":"ecef_to_ned(r_ecef::AbstractVector{T1}, lat::T2, lon::T3, h::T4; translate::Bool = false) -> SVector{3, T}\n\nConvert a vector r_ecef represented in the Earth-Centered, Earth-Fixed (ECEF) frame to the local reference frame NED (North, East, Down) at the geodetic position lat [rad], lon [rad], and h [m].\n\nIf translate is false, this function computes only the rotation between ECEF and NED. Otherwise, it will also translate the vector considering the distance between the Earth's center and NED origin.\n\nThe element type T of the returned vector is obtained by promoting T1, T2, T3, and T4 to a float.\n\nRemarks\n\nThis algorithm was based on the information in [1].\n\nReferences\n\n[1]: Transformations between ECEF and ENU   coordinates\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.fetch_iers_eop-Tuple{}","page":"Library","title":"SatelliteToolboxTransformations.fetch_iers_eop","text":"fetch_iers_eop([data_type]; kwargs...) -> EopIau1980 | EopIau2000A\n\nDownload and parse the IERS EOP C04 data. The data type is specified by data_type. Supported values are:\n\nVal(:IAU1980): Get IERS EOP C04 IAU1980 data.\nVal(:IAU2000A): Get IERS EOP C04 IAU2000A data.\n\nIf data_type is omitted, then it defaults to Val(:IAU1980).\n\nThis function returns a structure (EopIau1980 or EopIau2000A, depending on data_type) with the interpolations of the EOP parameters. Notice that the interpolation indexing is set to the Julian Day.\n\nKeywords\n\nforce_download::Bool: If the EOP file exists and is less than 7 days old, it will not be   downloaded again. A new download can be forced by setting this keyword to true.   (Default = false)\nurl::String: URL of the EOP file.\n\njulia> eop = fetch_iers_eop()\n[ Info: Downloading file 'EOP_IAU1980.TXT' from 'https://datacenter.iers.org/data/csv/finals.all.csv'...\nEopIau1980:\n     Data │ Timespan\n ─────────┼──────────────────────────────────────────────\n        x │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n        y │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n  UT1-UTC │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n      LOD │ 1973-01-02T00:00:00 -- 2021-05-19T00:00:00\n       dψ │ 1973-01-02T00:00:00 -- 2021-08-05T00:00:00\n       dϵ │ 1973-01-02T00:00:00 -- 2021-08-05T00:00:00\n\njulia> eop = fetch_iers_eop(Val(:IAU2000A))\n[ Info: Downloading file 'EOP_IAU2000A.TXT' from 'https://datacenter.iers.org/data/csv/finals2000A.all.csv'...\nEopIau2000A:\n     Data │ Timespan\n ─────────┼──────────────────────────────────────────────\n        x │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n        y │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n  UT1-UTC │ 1973-01-02T00:00:00 -- 2022-05-28T00:00:00\n      LOD │ 1973-01-02T00:00:00 -- 2021-05-19T00:00:00\n       dX │ 1973-01-02T00:00:00 -- 2021-08-05T00:00:00\n       dY │ 1973-01-02T00:00:00 -- 2021-08-05T00:00:00\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geocentric_to_ecef-Tuple{AbstractVector}","page":"Library","title":"SatelliteToolboxTransformations.geocentric_to_ecef","text":"geocentric_to_ecef(geocentric_state::AbstractVector) -> SVector{3, T}\n\nConvert the geocentric coordinates (latitude lat [rad], longitude lon [rad], and distance from Earth's center r [m]) into a Earth-Centered, Earth-Fixed vector [m].\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geocentric_to_ecef-Tuple{Int64, Int64, Int64}","page":"Library","title":"SatelliteToolboxTransformations.geocentric_to_ecef","text":"geocentric_to_ecef(lat::Int, lon::Int, r::Int) -> SVector{3, Float64}\n\nConvert the geocentric coordinates (latitude lat [rad], longitude lon [rad], and distance from Earth's center r [m]) into a Earth-Centered, Earth-Fixed vector [m].\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geocentric_to_ecef-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{T1, T2, T3}} where {T1<:Number, T2<:Number, T3<:Number}","page":"Library","title":"SatelliteToolboxTransformations.geocentric_to_ecef","text":"geocentric_to_ecef(lat::Number, lon::Number, r::Number) -> SVector{3, T}\n\nConvert the geocentric coordinates (latitude lat [rad], longitude lon [rad], and distance from Earth's center r [m]) into a Earth-Centered, Earth-Fixed vector [m].\n\nnote: Note\nThe output type T is obtained by promoting the input types T1, T2, and T3 to float.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geocentric_to_geodetic-Union{Tuple{AbstractVector}, Tuple{T}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.geocentric_to_geodetic","text":"geocentric_to_geodetic(geocentric_state::AbstractVector; ellipsoid::Ellipsoid{T} = WGS84_ELLIPSOID) where T<:Number -> T, T\n\nCompute the geodetic latitude and altitude above the reference ellipsoid (defaults to WGS-84) from the geocentric latitude ϕ_gc (-π/2, π/2) [rad] and radius r [m].  Notice that the longitude is the same in both geocentric and geodetic coordinates.\n\ninfo: Info\nThe longitude is the same between states so the geocentric state vector only includes latitude and radius.The algorithm is based in [1].\n\nReturns\n\nT: Geodetic latitude [rad].\nT: Altitude above the reference ellipsoid (defaults to WGS-84) [m].\n\nReferences\n\n[1] Borkowski, K. M (1987). Transformation of geocentric to geodetic coordinates   without approximations. Astrophysics and Space Science, vol.  139, pp. 1-4.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geocentric_to_geodetic-Union{Tuple{T}, Tuple{Number, Number}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.geocentric_to_geodetic","text":"geocentric_to_geodetic(ϕ_gc::Number, r::Number; ellipsoid::Ellipsoid{T} = WGS84_ELLIPSOID) where T<:Number -> T, T\n\nCompute the geodetic latitude and altitude above the reference ellipsoid (defaults to WGS-84) from the geocentric latitude ϕ_gc (-π/2, π/2) [rad] and radius r [m].  Notice that the longitude is the same in both geocentric and geodetic coordinates.\n\ninfo: Info\nThe algorithm is based in [1].\n\nReturns\n\nT: Geodetic latitude [rad].\nT: Altitude above the reference ellipsoid (defaults to WGS-84) [m].\n\nReferences\n\n[1] Borkowski, K. M (1987). Transformation of geocentric to geodetic coordinates   without approximations. Astrophysics and Space Science, vol.  139, pp. 1-4.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geodetic_to_ecef-Union{Tuple{AbstractVector}, Tuple{T}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.geodetic_to_ecef","text":"geodetic_to_ecef(geodetic_state::AbstractVector; ellipsoid::Ellipsoid{T} = wgs84_ellipsoid) where T<:Number -> SVector{3, T}\n\nConvert the latitude lat [rad], longitude lon [rad], and altitude h [m] above the reference ellipsoid (defaults to WGS-84) into a vector represented on the Earth-Centered, Earth-Fixed (ECEF) reference frame.\n\ninfo: Info\nThe algorithm is based in [1].\n\nReference\n\n[1]: mu-blox ag (1999). Datum Transformations of GPS Positions. Application Note.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geodetic_to_ecef-Union{Tuple{T}, Tuple{HT}, Tuple{LT2}, Tuple{LT}, Tuple{LT, LT2, HT}} where {LT<:Number, LT2<:Number, HT<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxTransformations.geodetic_to_ecef","text":"geodetic_to_ecef(lat::Number, lon::Number, h::Number; ellipsoid::Ellipsoid{T} = wgs84_ellipsoid) where T<:Number -> SVector{3, T}\n\nConvert the latitude lat [rad], longitude lon [rad], and altitude h [m] above the reference ellipsoid (defaults to WGS-84) into a vector represented on the Earth-Centered, Earth-Fixed (ECEF) reference frame.\n\ninfo: Info\nThe algorithm is based in [1].\n\nReference\n\n[1]: mu-blox ag (1999). Datum Transformations of GPS Positions. Application Note.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geodetic_to_geocentric-Union{Tuple{AbstractVector}, Tuple{T}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.geodetic_to_geocentric","text":"geodetic_to_geocentric(geodetic_state::AbstractVector; ellipsoid::Ellipsoid{T} = WGS84_ELLIPSOID) where T<:Number -> T, T\n\nCompute the geocentric latitude and radius from the geodetic latitude ϕ_gd (-π/2, π/2) [rad] and height above the reference ellipsoid h [m] (defaults to WGS-84).  Notice that the longitude is the same in both geocentric and geodetic coordinates.\n\ninfo: Info\nThe longitude is the same between states so the geocentric state vector only includes latitude and radius.The algorithm is based in [1](p. 3).\n\nReturns\n\nT: Geocentric latitude [rad].\nT: Radius from the center of the Earth [m].\n\nReferences\n\n[1] ISO TC 20/SC 14 N (2011). Geomagnetic Reference Models.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.geodetic_to_geocentric-Union{Tuple{T}, Tuple{Number, Number}} where T<:Number","page":"Library","title":"SatelliteToolboxTransformations.geodetic_to_geocentric","text":"geodetic_to_geocentric(ϕ_gd::Number, h::Number; ellipsoid::Ellipsoid{T} = WGS84_ELLIPSOID) where T<:Number -> T, T\n\nCompute the geocentric latitude and radius from the geodetic latitude ϕ_gd (-π/2, π/2) [rad] and height above the reference ellipsoid h [m] (defaults to WGS-84).  Notice that the longitude is the same in both geocentric and geodetic coordinates.\n\ninfo: Info\nThe algorithm is based in [1](p. 3).\n\nReturns\n\nT: Geocentric latitude [rad].\nT: Radius from the center of the Earth [m].\n\nReferences\n\n[1] ISO TC 20/SC 14 N (2011). Geomagnetic Reference Models.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.get_Δat-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.get_Δat","text":"get_Δat(JD::Number) -> Float64\n\nGet the accumulated leap seconds (ΔAT) [s] between UTC and International Atomic Time (TAI) in the given JD. This function search for ΔAT in the array ΔAT_Data.\n\nRemarks\n\nIf JD is before _ΔAT[1, 1], then 10 will be returned. Notice that this can lead to errors.\n\nIf JD is after _ΔAT[end, 1], then _ΔAT[end, 2] will be returned, because it is not possible yet to predict when leap seconds will be added.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_tt_to_utc-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.jd_tt_to_utc","text":"jd_tt_to_utc(JD_TT::Number, ΔAT::Number) -> Float64\n\nConvert the Julian Day in TT JD_TT (Terrestrial Time) to the Julian Day in UTC (Terrestrial Time) using the accumulated difference ΔAT between UTC and the International Atomic Time (TAI). If no value is provided, then the leap seconds will be obtained from the table ΔAT_Data. Notice that, in this case, if a date previous to 1973 is provided, then a fixed value of 10 will be used, leading to wrong computations.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_ut1_to_utc-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.jd_ut1_to_utc","text":"jd_ut1_to_utc(JD_UT1::Number, ΔUT1::Number) -> Float64\n\nConvert the Julian Day in UT1 JD_UT1 to the Julian Day in UTC using the accumulated difference ΔUT1, which is provided by IERS EOP Data.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_ut1_to_utc-Tuple{Number, Union{EopIau1980, EopIau2000A}}","page":"Library","title":"SatelliteToolboxTransformations.jd_ut1_to_utc","text":"jd_utc_to_ut1(JD_UTC::Number, eop::Union{EopIau1980, EopIau2000A}) -> Float64\n\nConvert the Julian Day in UT1 JD_UT1 to the Julian Day in UTC using the accumulated difference given by the EOP Data eop (see fetch_iers_eop).  Notice that the accumulated difference will be interpolated.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_utc_to_tt-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.jd_utc_to_tt","text":"jd_utc_to_tt(JD_UTC::Number[, ΔAT::Number]) -> Float64\n\nConvert the Julian Day in UTC JD_UTC to the Julian Day in TT (Terrestrial Time) using the accumulated difference ΔAT between UTC and the International Atomic Time (TAI). If no value is provided, then the leap seconds will be obtained from the table ΔAT_Data. Notice that, in this case, if a date previous to 1973 is provided, then a fixed value of 10 will be used, leading to wrong computations.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_utc_to_ut1-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.jd_utc_to_ut1","text":"jd_utc_to_ut1(JD_UTC::Number, ΔUT1::Number) -> Float64\n\nConvert the Julian Day in UTC JD_UTC to the Julian Day in UT1 using the accumulated difference ΔUT1, which is provided by IERS EOP Data.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.jd_utc_to_ut1-Tuple{Number, Union{EopIau1980, EopIau2000A}}","page":"Library","title":"SatelliteToolboxTransformations.jd_utc_to_ut1","text":"jd_utc_to_ut1(JD_UTC::Number, eop::Union{EopIau1980, EopIau2000A}) -> Float64\n\nConvert the Julian Day in UTC JD_UTC to the Julian Day in UT1 using the accumulated difference given by the EOP Data eop (see fetch_iers_eop).  Notice that the accumulated difference will be interpolated.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.luni_solar_args_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.luni_solar_args_iau2006","text":"luni_solar_args_iau2006(jd_tt::Number) -> NTuple{5, Float64}\n\nCompute the fundamental arguments related to the luni-solar effect for the IAU-2006 theory [1](p. 211).\n\nThe returned values are in [rad].\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.mean_obliquity_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.mean_obliquity_iau2006","text":"mean_obliquity_iau2006(jd_tt::Number) -> Float64\n\nCompute the mean obliquity of the ecliptic [rad] using the equinox-based IAU-2006 theory in the Julian day jd_tt [Terrestiral Time].\n\nThe algorithm was obtained in [1].\n\nReference\n\n[1]: Wallace, P. T., Capitaine, N (2006). Precession-nutation procedures consistent   with IAU 2006 resolutions. Astronomy & Astrophysics.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.ned_to_ecef-Union{Tuple{T4}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, T2, T3, T4}} where {T1<:Number, T2<:Number, T3<:Number, T4<:Number}","page":"Library","title":"SatelliteToolboxTransformations.ned_to_ecef","text":"ned_to_ecef(r_ned::AbstractVector{T1}, lat::T2, lon::T3, h::T4; translate::Bool = false) -> SVector{3, T}\n\nConvert a vector r_ned represented in the local reference frame NED (North, East, Down) at the geodetic position lat [rad], lon [rad], and h [m] to the Earth-Centered, Earth-Fixed (ECEF) frame.\n\nIf translate is false, then this function computes only the rotation between NED and ECEF. Otherwise, it will also translate the vector considering the distance between the Earth's center and NED origin.\n\nThe element type T of the returned vector is obtained by promoting T1, T2, T3, and T4 to a float.\n\nRemarks\n\nThis algorithm was based on the information in [1].\n\nReferences\n\n[1] Transformations between ECEF and ENU   coordinates\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.nutation_eo_iau2006","page":"Library","title":"SatelliteToolboxTransformations.nutation_eo_iau2006","text":"nutation_eo_iau2006(jd_tt::Number) -> NTuple{4, Float64}\n\nCompute the nutation parameters and the Equation of Origins (EO) at the Julian Day jd_tt [TT] using the equinox-based 2006 IAU Theory of Nutation. Notice that one can provide corrections for the nutation in obliquity (δΔϵ_2000) [rad] and in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nReturns\n\nFloat64: The mean obliquity of the ecliptic [rad].\nFloat64: The nutation in obliquity of the ecliptic [rad].\nFloat64: The nutation in longitude [rad].\nFloat64: The Equation of Origins (EO) [rad].\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.nutation_fk5","page":"Library","title":"SatelliteToolboxTransformations.nutation_fk5","text":"nutation_fk5(jd_tt::Number, n_max::Number = 106, nut_coefs_1980::Matrix = _IAU_1980_NUTATION_COEFFICIENTS)\n\nCompute the nutation parameters at the Julian Day jd_tt [Terrestrial Time] using the 1980 IAU Theory of Nutation. The coefficients are nut_coefs_1980 that must be a matrix in which each line has the following syntax [1](p.  1043):\n\nan1  an2  an3  an4  an5  Ai  Bi  Ci  Di\n\nwhere the units of Ai and Ci are [0.0001\"] and the units of Bi and Di are [0.0001\"/JC]. The user can also specify the number of coefficients n_max that will be used when computing the nutation. If n_max is omitted, the it defaults to 106.\n\nReturns\n\nFloat64: The mean obliquity of the ecliptic [rad].\nFloat64: The nutation in obliquity of the ecliptic [rad].\nFloat64: The nutation in longitude [rad].\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.orb_eci_to_eci-Union{Tuple{T}, Tuple{T, Vararg{Any}}} where T<:Orbit","page":"Library","title":"SatelliteToolboxTransformations.orb_eci_to_eci","text":"orb_eci_to_eci(orb::T, args...) where T<:Orbit -> T\n\nConvert the orbit representation orb from an ECI frame to another ECI frame. The arguments args... must match those of the function r_eci_to_eci without the rotation representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.planetary_args_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.planetary_args_iau2006","text":"planetary_args_iau2006(jd_tt::Number) -> NTuple{9, Float64}\n\nCompute the fundamental arguments related to the planetary effects for the IAU-2006 theory [1](p. 211).\n\nThe returned values are in [rad].\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.precession_fk5-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.precession_fk5","text":"precession_fk5(jd_tt::Number) -> (Float64, Float64, Float64)\n\nCompute the angles related to the precession movement in the Julian Day jd_tt [Terrestrial Time] using the theory IAU-76/FK5.\n\nReturns\n\nNTuple{3, Float64}: The angles (ζ, Θ, z) as described in [1](p. 226-228).\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.precession_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.precession_iau2006","text":"precession_iau2006(jd_tt::Number) -> NTuple{3, Float64}\n\nCompute the precession angles [rad] according to equinox-based IAU-2006 theory in the Julia day jd_tt [Terrestrial Time].\n\nThis algorithm was obtained from [1](p. 49).\n\nReferences\n\n[1]: IERS (2010). Transformation between the International Terrestrial Reference   System and the Geocentric Celestial Reference System. IERS Technical Note No. 36,   Chapter 5.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_cirs_to_gcrf_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_cirs_to_gcrf_iau2006","text":"r_cirs_to_gcrf_iau2006([T, ]jd_tt::Number, δx::Number = 0, δy::Number = 0) -> T\n\nCompute the rotation that aligns the Celestial Intermediate Reference System (CIRS) with the Geocentric Celestial Reference Frame (GCRF) at the Julian Day jd_tt [TT] and considering the IERS EOP Data δx [rad] and δy [rad] (see fetch_iers_eop). This algorithm uses the IAU-2006 theory.\n\nThe IERS EOP Data δx and δy accounts for the free-core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the CIRS frame with the GCRF frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_cirs_to_tirs_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_cirs_to_tirs_iau2006","text":"r_cirs_to_tirs_iau2006([T, ]jd_ut1::Number) -> T\n\nCompute the rotation that aligns the Celestial Intermediate Reference System (CIRS) with the Terrestrial Intermediate Reference System (TIRS) at the Julian Day jd_ut1 [UT1]. This algorithm uses the IAU-2006 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nThe rotation that aligns the CIRS frame with the TIRS frame. The rotation representation is selected by the optional parameter T.\n\nRemarks\n\nThe reference frames TIRS and CIRS are separated by a rotation about the Z-axis of the Earth Rotation Angle, which is the angle between the Conventional International Origin (CIO) and the Terrestrial Intermediate Origin (TIO) [1]. The latter is a reference meridian on Earth that is located about 100m away from Greenwich meridian along the equator of the Celestial Intermediate Pole (CIP) [1].\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_ecef_to_ecef-Tuple{Union{Val{:ITRF}, Val{:PEF}}, Union{Val{:ITRF}, Val{:PEF}}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.r_ecef_to_ecef","text":"r_ecef_to_ecef([T, ]ECEFo, ECEFf, jd_utc::Number, eop) -> T\n\nCompute the rotation from an Earth-Centered, Earth-Fixed (ECEF) reference frame to another ECEF reference frame at the Julian Day [UTC] jd_utc. The rotation description that will be used is given by T, which can be DCM or Quaternion. The origin ECEF frame is selected by the input ECEFo and the destination ECEF frame is selected by the input ECEFf. The model used to compute the rotation is specified by the selection of the origin and destination frames. Currently, there are two supported models: IAU-76/FK5 and IAU-2006 with 2010 conventions.\n\nRotation description\n\nThe rotations that aligns the origin ECEF frame with the destination ECEF frame can be described by Direction Cosine Matrices or Quaternions. This is selected by the parameter T.\n\nThe possible values are:\n\nDCM: The rotation will be described by a Direction Cosine Matrix.\nQuaternion: The rotation will be described by a Quaternion.\n\nIf no value is specified, then it falls back to DCM.\n\nConversion model\n\nThe model that will be used to compute the rotation is automatically inferred given the selection of the origin and destination frames. Notice that mixing IAU-76/FK5 and IAU-2006/2010 frames is not supported.\n\nECEF Frame\n\nThe supported ECEF frames for both origin ECEFo and destination ECEFf are:\n\nITRF(): ECEF will be selected as the International Terrestrial Reference Frame (ITRF).\nPEF(): ECEF will be selected as the Pseudo-Earth Fixed (PEF) reference frame.\nTIRS(): ECEF will be selected as the Terrestrial Intermediate Reference System (TIRS).\n\nEarth orientation parameters (EOP)\n\nThe conversion between the supported ECEF frames always depends on EOP (see fetch_iers_eop and read_iers_eop). If IAU-76/FK5 model is used, then the type of eop must be EopIau1980. Otherwise, if IAU-2006/2010 model is used, then the type of eop must be EopIau2000A.\n\nReturns\n\nT: The rotation that aligns the ECEF reference frame with the ECI reference frame.\n\nExamples\n\njulia> eop_iau1980 = fetch_iers_eop();\n\njulia> r_ecef_to_ecef(PEF(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_IAU1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n  1.0          0.0         -4.34677e-7\n -6.29476e-13  1.0         -1.44815e-6\n  4.34677e-7   1.44815e-6   1.0\n\njulia> r_ecef_to_ecef(Quaternion, PEF(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_IAU1980)\nQuaternion{Float64}:\n  + 1.0 - 7.24073e-7⋅i + 2.17339e-7⋅j + 2.17339e-7⋅k\n\njulia> eop_IAU2000A = fetch_iers_eop(Val(:IAU2000A));\n\njulia> r_ecef_to_ecef(TIRS(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_IAU2000A)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n  1.0          3.08408e-11  -4.34677e-7\n -3.14703e-11  1.0          -1.44815e-6\n  4.34677e-7   1.44815e-6    1.0\n\njulia> r_ecef_to_ecef(Quaternion, TIRS(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_IAU2000A)\nQuaternion{Float64}:\n  + 1.0 - 7.24073e-7⋅i + 2.17339e-7⋅j + 2.17339e-7⋅k\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_ecef_to_eci-Tuple{Union{Val{:ITRF}, Val{:PEF}}, Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.r_ecef_to_eci","text":"r_ecef_to_eci([T, ]ECEF, ECI, jd_utc::Number[, eop]) -> T\n\nCompute the rotation from an Earth-Centered, Earth-Fixed (ECEF) reference frame to an Earth-Centered Inertial (ECI) reference frame at the Julian Day [UTC] jd_utc. The rotation description that will be used is given by T, which can be DCM or Quaternion. The ECEF frame is selected by the input ECEF and the ECI frame is selected by the input ECI. The possible values are listed below. The model used to compute the rotation is specified by the selection of the origin and destination frames. Currently, there are two supported models: IAU-76/FK5 and IAU-2006 with 2010 conventions (CIO and equinox approaches).\n\nRotation description\n\nThe rotations that aligns the ECEF with ECI can be described by Direction Cosine Matrices or Quaternions. This is selected by the parameter T. The possible values are:\n\nDCM: The rotation will be described by a Direction Cosine Matrix.\nQuaternion: The rotation will be described by a Quaternion.\n\nIf no value is specified, then it falls back to DCM.\n\nConversion model\n\nThe model that will be used to compute the rotation is automatically inferred given the selection of the origin and destination frames. Notice that mixing IAU-76/FK5 and IAU-2006/2010 frames is not supported.\n\nECEF Frame\n\nThe ECEF frame is selected by the parameter ECEF. The possible values are:\n\nITRF(): ECEF will be selected as the International Terrestrial Reference Frame (ITRF).\nPEF(): ECEF will be selected as the Pseudo-Earth Fixed (PEF) reference frame.\nTIRS(): ECEF will be selected as the Terrestrial Intermediate Reference System (TIRS).\n\nECI Frame\n\nThe ECI frame is selected by the parameter ECI. The possible values are:\n\nTEME(): ECI will be selected as the True Equator Mean Equinox (TEME) reference frame.\nTOD(): ECI will be selected as the True of Date (TOD).\nMOD(): ECI will be selected as the Mean of Date (MOD).\nJ2000(): ECI will be selected as the J2000 reference frame.\nGCRF(): ECI will be selected as the Geocentric Celestial Reference Frame (GCRF).\nCIRS(): ECI will be selected as the Celestial Intermediate Reference System (CIRS).\nERS(): ECI will be selected as the Earth Reference System (ERS).\nMOD06(): ECI will be selected as the Mean of Date (MOD) according to the definition in   IAU-2006/2010 theory.\nMJ2000(): ECI will be selected as the J2000 mean equatorial frame (MJ2000).\n\nnote: Note\nThe frames MOD() and MOD06() are virtually the same. However, we selected different names to make clear which theory are being used since mixing transformation between frames from IAU-76/FK5 and IAU-2006/2010 must be performed with caution.\n\nEarth orientation parameters (EOP)\n\nThe conversion between the frames depends on EOP (see fetch_iers_eop and read_iers_eop). If IAU-76/FK5 model is used, then the type of eop must be EopIau1980. Otherwise, if IAU-2006/2010 model is used, then the type of eop must be EopIau2000A. The following table shows the requirements for EOP data given the selected frames.\n\nModel ECEF ECI EOP Data\nIAU-76/FK5 ITRF GCRF EOP IAU1980\nIAU-76/FK5 ITRF J2000 EOP IAU1980\nIAU-76/FK5 ITRF MOD EOP IAU1980\nIAU-76/FK5 ITRF TOD EOP IAU1980\nIAU-76/FK5 ITRF TEME EOP IAU1980\nIAU-76/FK5 PEF GCRF EOP IAU1980\nIAU-76/FK5 PEF J2000 Not required¹\nIAU-76/FK5 PEF MOD Not required¹\nIAU-76/FK5 PEF TOD Not required¹\nIAU-76/FK5 PEF TEME Not required¹\nIAU-2006/2010 CIO-based ITRF CIRS EOP IAU2000A\nIAU-2006/2010 CIO-based ITRF GCRF EOP IAU2000A\nIAU-2006/2010 CIO-based TIRS CIRS Not required¹\nIAU-2006/2010 CIO-based TIRS GCRF Not required¹ ²\nIAU-2006/2010 Equinox-based ITRF ERS EOP IAU2000A\nIAU-2006/2010 Equinox-based ITRF MOD06 EOP IAU2000A\nIAU-2006/2010 Equinox-based ITRF MJ2000 EOP IAU2000A\nIAU-2006/2010 Equinox-based TIRS ERS Not required¹ ³\nIAU-2006/2010 Equinox-based TIRS MOD06 Not required¹ ³\nIAU-2006/2010 Equinox-based TIRS MJ2000 Not required¹ ³\n\n¹: In this case, UTC will be assumed equal to UT1 to compute the Greenwich Mean Sidereal Time. This is an approximation, but should be sufficiently accurate for some applications. Notice that, if EOP Data is provided, UT1 will be accurately computed.\n\n²: In this case, the terms that account for the free core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF will not be available, reducing the precision.\n\n³: In this case, the terms that corrects the nutation in obliquity and in longitude due to the free core nutation will not be available, reducing the precision.\n\nMOD and TOD\n\nIn this function, if EOP corrections are not provided, then MOD and TOD frames will be computed considering the original IAU-76/FK5 theory. Otherwise, the corrected frame will be used.\n\nReturns\n\nT: The rotation that aligns the ECEF reference frame with the ECI reference frame.\n\nExamples\n\njulia> eop_iau1980 = fetch_iers_eop(Val(:IAU1980));\n\njulia> r_ecef_to_eci(DCM, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267      0.78518     -0.00132979\n -0.78518      -0.619267     3.33509e-5\n -0.000797312   0.00106478   0.999999\n\njulia> r_ecef_to_eci(ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267      0.78518     -0.00132979\n -0.78518      -0.619267     3.33509e-5\n -0.000797312   0.00106478   0.999999\n\njulia> r_ecef_to_eci(PEF(), J2000(), date_to_jd(1986, 06, 19, 21, 35, 0))\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619271      0.785176    -0.00133066\n -0.785177     -0.619272     3.45854e-5\n -0.000796885   0.00106622   0.999999\n\njulia> r_ecef_to_eci(PEF(), J2000(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267      0.78518     -0.00133066\n -0.78518      -0.619267     3.45854e-5\n -0.000796879   0.00106623   0.999999\n\njulia> r_ecef_to_eci(Quaternion, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\nQuaternion{Float64}:\n  + 0.43631 - 0.000590997⋅i + 0.000305106⋅j + 0.000305106⋅k\n\njulia> eop_iau2000a = fetch_iers_eop(Val(:IAU2000A));\n\njulia> r_ecef_to_eci(ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267      0.78518     -0.00132979\n -0.78518      -0.619267     3.33516e-5\n -0.000797311   0.00106478   0.999999\n\njulia> r_ecef_to_eci(TIRS(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0))\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619271      0.785176    -0.00133066\n -0.785177     -0.619272     3.45884e-5\n -0.000796885   0.00106623   0.999999\n\njulia> r_ecef_to_eci(Quaternion, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\nQuaternion{Float64}:\n  + 0.43631 - 0.000590997⋅i + 0.000305106⋅j + 0.000305106⋅k\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_eci_to_ecef-Tuple{Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Union{Val{:ITRF}, Val{:PEF}}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.r_eci_to_ecef","text":"r_eci_to_ecef([T, ]ECI, ECEF, jd_utc::Number[, eop]) -> T\n\nCompute the rotation from an Earth-Centered Inertial (ECI) reference frame to an Earth-Centered, Earth-Fixed (ECEF) reference frame at the Julian Day [UTC] jd_utc. The rotation description that will be used is given by T, which can be DCM or Quaternion. The ECI frame is selected by the input ECI and the ECEF frame is selected by the input ECEF. The possible values are listed below. The model used to compute the rotation is specified by the selection of the origin and destination frames. Currently, there are two supported models: IAU-76/FK5 and IAU-2006 with 2010 conventions (CIO and equinox approaches).\n\nRotation description\n\nThe rotations that aligns the ECI with ECEF can be described by Direction Cosine Matrices or Quaternions. This is selected by the parameter T. The possible values are:\n\nDCM: The rotation will be described by a Direction Cosine Matrix.\nQuaternion: The rotation will be described by a Quaternion.\n\nIf no value is specified, then it falls back to DCM.\n\nConversion model\n\nThe model that will be used to compute the rotation is automatically inferred given the selection of the origin and destination frames. Notice that mixing IAU-76/FK5 and IAU-2006/2010 frames is not supported.\n\nECI Frame\n\nThe ECI frame is selected by the parameter ECI. The possible values are:\n\nTEME(): ECI will be selected as the True Equator Mean Equinox (TEME) reference frame.\nTOD(): ECI will be selected as the True of Date (TOD).\nMOD(): ECI will be selected as the Mean of Date (MOD).\nJ2000(): ECI will be selected as the J2000 reference frame.\nGCRF(): ECI will be selected as the Geocentric Celestial Reference Frame (GCRF).\nCIRS(): ECEF will be selected as the Celestial Intermediate Reference System (CIRS).\nERS(): ECI will be selected as the Earth Reference System (ERS).\nMOD06(): ECI will be selected as the Mean of Date (MOD) according to the definition in   IAU-2006/2010 theory.\nMJ2000(): ECI will be selected as the J2000 mean equatorial frame (MJ2000).\n\nnote: Note\nThe frames MOD() and MOD06() are virtually the same. However, we selected different names to make clear which theory are being used since mixing transformation between frames from IAU-76/FK5 and IAU-2006/2010 must be performed with caution.\n\nECEF Frame\n\nThe ECEF frame is selected by the parameter ECEF. The possible values are:\n\nITRF(): ECEF will be selected as the International Terrestrial Reference Frame (ITRF).\nPEF(): ECEF will be selected as the Pseudo-Earth Fixed (PEF) reference frame.\nTIRS(): ECEF will be selected as the Terrestrial Intermediate Reference System (TIRS).\n\nEarth orientation parameters (EOP)\n\nThe conversion between the frames depends on EOP (see fetch_iers_eop and read_iers_eop). If IAU-76/FK5 model is used, then the type of eop must be EopIau1980. Otherwise, if IAU-2006/2010 model is used, then the type of eop must be EopIau2000A. The following table shows the requirements for EOP data given the selected frames.\n\nModel ECI ECEF EOP Data\nIAU-76/FK5 GCRF ITRF EOP IAU1980\nIAU-76/FK5 J2000 ITRF EOP IAU1980\nIAU-76/FK5 MOD ITRF EOP IAU1980\nIAU-76/FK5 TOD ITRF EOP IAU1980\nIAU-76/FK5 TEME ITRF EOP IAU1980\nIAU-76/FK5 GCRF PEF EOP IAU1980\nIAU-76/FK5 J2000 PEF Not required¹\nIAU-76/FK5 MOD PEF Not required¹\nIAU-76/FK5 TOD PEF Not required¹\nIAU-76/FK5 TEME PEF Not required¹\nIAU-2006/2010 CIO-based CIRS ITRF EOP IAU2000A\nIAU-2006/2010 CIO-based GCRF ITRF EOP IAU2000A\nIAU-2006/2010 CIO-based CIRS TIRS Not required¹\nIAU-2006/2010 CIO-based GCRF TIRS Not required¹ ²\nIAU-2006/2010 Equinox-based ERS TIRS EOP IAU2000A\nIAU-2006/2010 Equinox-based MOD06 ITRF EOP IAU2000A\nIAU-2006/2010 Equinox-based MJ2000 ITRF EOP IAU2000A\nIAU-2006/2010 Equinox-based ERS TIRS Not required¹ ³\nIAU-2006/2010 Equinox-based MOD06 TIRS Not required¹ ³\nIAU-2006/2010 Equinox-based MJ2000 TIRS Not required¹ ³\n\n¹: In this case, UTC will be assumed equal to UT1 to compute the Greenwich Mean Sidereal Time. This is an approximation, but should be sufficiently accurate for some applications. Notice that, if EOP Data is provided, UT1 will be accurately computed.\n\n²: In this case, the terms that account for the free-core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF will not be available, reducing the precision.\n\nMOD and TOD\n\nIn this function, if EOP corrections are not provided, then MOD and TOD frames will be computed considering the original IAU-76/FK5 theory. Otherwise, the corrected frame will be used.\n\nReturns\n\nT: The rotation that aligns the ECI reference with the ECEF reference frame.\n\nExamples\n\njulia> eop_iau1980 = fetch_iers_eop(Val(:IAU1980));\n\njulia> r_eci_to_ecef(DCM, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267    -0.78518     -0.000797312\n  0.78518     -0.619267     0.00106478\n -0.00132979   3.33509e-5   0.999999\n\njulia> r_eci_to_ecef(GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267    -0.78518     -0.000797312\n  0.78518     -0.619267     0.00106478\n -0.00132979   3.33509e-5   0.999999\n\njulia> r_eci_to_ecef(J2000(), PEF(), date_to_jd(1986, 06, 19, 21, 35, 0))\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619271    -0.785177    -0.000796885\n  0.785176    -0.619272     0.00106622\n -0.00133066   3.45854e-5   0.999999\n\njulia> r_eci_to_ecef(J2000(), PEF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267    -0.78518     -0.000796879\n  0.78518     -0.619267     0.00106623\n -0.00133066   3.45854e-5   0.999999\n\njulia> r_eci_to_ecef(Quaternion, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\nQuaternion{Float64}:\n  + 0.43631 + 0.000590997⋅i - 0.000305106⋅j - 0.000305106⋅k\n\njulia> eop_iau2000a = fetch_iers_eop(Val(:IAU2000A));\n\njulia> r_eci_to_ecef(GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619267    -0.78518     -0.000797311\n  0.78518     -0.619267     0.00106478\n -0.00132979   3.33516e-5   0.999999\n\njulia> r_eci_to_ecef(GCRF(), TIRS(), date_to_jd(1986, 06, 19, 21, 35, 0))\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n -0.619271    -0.785177    -0.000796885\n  0.785176    -0.619272     0.00106623\n -0.00133066   3.45884e-5   0.999999\n\njulia> r_eci_to_ecef(Quaternion, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\nQuaternion{Float64}:\n  + 0.43631 + 0.000590997⋅i - 0.000305106⋅j - 0.000305106⋅k\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_eci_to_eci-Tuple{Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.r_eci_to_eci","text":"r_eci_to_eci([T, ]ECIo, ECIf, jd_utc::Number[, eop]) -> T\nr_eci_to_eci([T, ]ECIo, jd_utco::Number, ECIf, jd_utcf::Number[, eop])\n\nCompute the rotation from an Earth-Centered Inertial (ECI) reference frame to another ECI reference frame. If the origin and destination frame contain only one of date frame, then the first signature is used and jd_utc is the epoch of this frame. On the other hand, if the origin and destination frame contain two of date frame¹, e.g. TOD => MOD, then the second signature must be used in which jd_utco is the epoch of the origin frame and jd_utcf is the epoch of the destination frame.\n\nThe rotation description that will be used is given by T, which can be DCM or Quaternion. The origin ECI frame is selected by the input ECIo and the destination ECI frame is selected by the input ECIf. The model used to compute the rotation is specified by the selection of the origin and destination frames.  Currently, there are two supported models: IAU-76/FK5 and IAU-2006 with 2010 conventions (CIO and equinox approaches).\n\n¹: TEME is an of date frame.\n\nRotation description\n\nThe rotations that aligns the origin ECI frame with the destination ECI frame can be described by Direction Cosine Matrices or Quaternions. This is selected by the parameter T.\n\nThe possible values are:\n\nDCM: The rotation will be described by a Direction Cosine Matrix.\nQuaternion: The rotation will be described by a Quaternion.\n\nIf no value is specified, then it falls back to DCM.\n\nConversion model\n\nThe model that will be used to compute the rotation is automatically inferred given the selection of the origin and destination frames. Notice that mixing IAU-76/FK5 and IAU-2006/2010 frames is not supported.\n\nECI Frame\n\nThe supported ECI frames for both origin ECIo and destination ECIf are:\n\nTEME(): ECI will be selected as the True Equator Mean Equinox (TEME) reference frame.\nTOD(): ECI will be selected as the True of Date (TOD).\nMOD(): ECI will be selected as the Mean of Date (MOD).\nJ2000(): ECI will be selected as the J2000 reference frame.\nGCRF(): ECI will be selected as the Geocentric Celestial Reference Frame (GCRF).\nCIRS(): ECEF will be selected as the Celestial Intermediate Reference System (CIRS).\nERS(): ECI will be selected as the Earth Reference System (ERS).\nMOD06(): ECI will be selected as the Mean of Date (MOD) according to the definition in   IAU-2006/2010 theory.\nMJ2000(): ECI will be selected as the J2000 mean equatorial frame (MJ2000).\n\nnote: Note\nThe frames MOD() and MOD06() are virtually the same. However, we selected different names to make clear which theory are being used since mixing transformation between frames from IAU-76/FK5 and IAU-2006/2010 must be performed with caution.\n\nEarth orientation parameters (EOP)\n\nThe conversion between the frames depends on EOP Data (see fetch_iers_eop and read_iers_eop). If IAU-76/FK5 model is used, then the type of eop must be EopIau1980. Otherwise, if IAU-2006/2010 model is used, then the type of eop must be EopIau2000A. The following table shows the requirements for EOP data given the selected frames.\n\nModel ECIo ECIf EOP Data Function Signature\nIAU-76/FK5 GCRF J2000 EOP IAU1980 First\nIAU-76/FK5 GCRF MOD EOP IAU1980 First\nIAU-76/FK5 GCRF TOD EOP IAU1980 First\nIAU-76/FK5 GCRF TEME EOP IAU1980 First\nIAU-76/FK5 J2000 GCRF EOP IAU1980 First\nIAU-76/FK5 J2000 MOD Not required First\nIAU-76/FK5 J2000 TOD Not required First\nIAU-76/FK5 J2000 TEME Not required First\nIAU-76/FK5 MOD GCRF EOP IAU1980 First\nIAU-76/FK5 MOD J2000 Not required First\nIAU-76/FK5 MOD TOD Not required Second\nIAU-76/FK5 MOD TEME Not required Second\nIAU-76/FK5 TOD GCRF EOP IAU1980 First\nIAU-76/FK5 TOD J2000 Not required First\nIAU-76/FK5 TOD MOD Not required Second\nIAU-76/FK5 TOD TEME Not required Second\nIAU-76/FK5 TEME GCRF EOP IAU1980 First\nIAU-76/FK5 TEME J2000 Not required First\nIAU-76/FK5 TEME MOD Not required Second\nIAU-76/FK5 TEME TOD Not required Second\nIAU-2006/2010 CIO-based GCRF CIRS Not required¹ First\nIAU-2006/2010 CIO-based CIRS CIRS Not required¹ Second\nIAU-2006/2010 Equinox-based GCRF MJ2000 Not required First²\nIAU-2006/2010 Equinox-based GCRF MOD06 Not required First\nIAU-2006/2010 Equinox-based GCRF ERS Not required³ First\nIAU-2006/2010 Equinox-based MJ2000 GCRF Not required First²\nIAU-2006/2010 Equinox-based MJ2000 MOD06 Not required First\nIAU-2006/2010 Equinox-based MJ2000 ERS Not required³ First\nIAU-2006/2010 Equinox-based MOD06 GCRF Not required First\nIAU-2006/2010 Equinox-based MOD06 MJ2000 Not required First\nIAU-2006/2010 Equinox-based MOD06 ERS Not required³ First\nIAU-2006/2010 Equinox-based ERS GCRF Not required³ First\nIAU-2006/2010 Equinox-based ERS MJ2000 Not required³ First\nIAU-2006/2010 Equinox-based ERS MOD06 Not required³ First\n\n¹: In this case, the terms that account for the free-core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF will not be available, reducing the precision.\n\n²: The transformation between GCRF and MJ2000 is a constant rotation matrix called bias. Hence, the date does not modify it. However, this signature was kept to avoid complications in the API.\n\n³: In this case, the terms that corrects the nutation in obliquity and in longitude due to the free core nutation will not be available, reducing the precision.\n\nMOD and TOD\n\nIn this function, if EOP corrections are not provided, then MOD and TOD frames will be computed considering the original IAU-76/FK5 theory. Otherwise, the corrected frame will be used.\n\nReturns\n\nT: The rotation that aligns the origin ECI reference frame with the destination ECI   reference frame.\n\nExamples\n\njulia> eop_iau1980 = fetch_iers_eop(Val(:IAU1980));\n\njulia> r_eci_to_eci(DCM, GCRF(), J2000(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n  1.0          -4.71326e-12   1.53474e-9\n  4.71332e-12   1.0          -3.53979e-9\n -1.53474e-9    3.53979e-9    1.0\n\njulia> r_eci_to_eci(Quaternion, TEME(), GCRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\nQuaternion{Float64}:\n  + 0.999999 + 1.83013e-5⋅i + 0.000665304⋅j + 0.000665304⋅k\n\njulia> r_eci_to_eci(TOD(), date_to_jd(1986,6,19,21,35,0), TOD(), date_to_jd(1987,5,19,3,0,0), eop_iau1980)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n 1.0          -0.000224088  -9.73787e-5\n 0.000224087   1.0          -5.80065e-6\n 9.738e-5      5.77883e-6    1.0\n\njulia> r_eci_to_eci(Quaternion, TOD(), JD_J2000, MOD(), JD_J2000, eop_iau1980)\nQuaternion{Float64}:\n  + 1.0 - 1.40025e-5⋅i + 1.34736e-5⋅j + 1.34736e-5⋅k\n\njulia> r_eci_to_eci(J2000(), TEME(), date_to_jd(1986,6,19,21,35,0))\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n  0.999995    0.0030265    0.00133055\n -0.00302645  0.999995    -3.86125e-5\n -0.00133066  3.45854e-5   0.999999\n\njulia> eop_iau2000a = fetch_iers_eop(Val(:IAU2000A));\n\njulia> r_eci_to_eci(CIRS(), GCRF(), date_to_jd(1986,6,19,21,35,0), eop_iau2000a)\n3×3 StaticArrays.SMatrix{3, 3, Float64, 9} with indices SOneTo(3)×SOneTo(3):\n 0.999999     3.88389e-8  -0.00133066\n 7.18837e-9   1.0          3.45897e-5\n 0.00133066  -3.45897e-5   0.999999\n\njulia> r_eci_to_eci(Quaternion, CIRS(), GCRF(), date_to_jd(1986,6,19,21,35,0), eop_iau2000a)\nQuaternion{Float64}:\n  + 1.0 + 1.72949e-5⋅i + 0.000665332⋅j + 0.000665332⋅k\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_ers_to_mod_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_ers_to_mod_iau2006","text":"r_ers_to_mod_iau2006([T, ]jd_tt::Number, δΔϵ_2000::Number = 0, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Earth Reference System (ERS) with the Mean of Date (MOD) reference frame at Julian day jd_tt [Terrestrial Time].  This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in obliquity (δΔϵ_2000) and in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ). This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nThe reference systems ERS and MOD are separated by the nutation of the pole.\n\nReturns\n\nT: The rotation that aligns the ERS frame with the MOD frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_ers_to_tirs_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_ers_to_tirs_iau2006","text":"r_ers_to_tirs_iau2006(jd_ut1::Number, jd_tt::Number, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Earth Reference System (ERS) with the Terrestrial Intermediate Reference System (TIRS) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ). This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the ERS frame with the TIRS frame.\n\nRemarks\n\nThe reference frames TIRS and ERS are separated by a rotation about the Z-axis of the Greenwhich apparent sidereal angle (GAST). This angle is computed using the IAU-2006 theory, which consist of obtaining the Earth Rotation Angle (ERA) and subtracting the result of the Equation of Origins (EO).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_gcrf_to_cirs_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_gcrf_to_cirs_iau2006","text":"r_gcrf_to_cirs_iau2006([T, ]jd_tt::Number, δx::Number = 0, δy::Number = 0) -> T\n\nCompute the rotation that aligns the Geocentric Celestial Reference Frame (GCRF) with the Celestial Intermediate Reference System (CIRS) at the Julian Day jd_tt [TT] and considering the IERS EOP Data δx [rad] and δy [rad] (see fetch_iers_eop). This algorithm uses the IAU-2006 theory.\n\nThe IERS EOP Data δx and δy accounts for the free-core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the GCRF frame with the CIRS frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_gcrf_to_itrf_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_gcrf_to_itrf_fk5","text":"r_gcrf_to_itrf_fk5([T, ]jd_ut1::Number, jd_tt::Number, x_p::Number, y_p::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the Geocentric Celestial Reference Frame (GCRF) with the International Terrestrial Reference Frame (ITRF) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time], and considering the IERS EOP Data x_p [rad], y_p [rad], δΔϵ_1980 [rad], and δΔψ_1980 [rad] (see fetch_iers_eop). This algorithm uses the IAU-76/FK5 theory.\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian). δΔϵ_1980 is the nutation in obliquity. δΔψ_1980 is the nutation in longitude.\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the GCRF frame with the ITRF frame.\n\nRemarks\n\nThe EOP data related to the polar motion (x_p and y_p) is required, since this is the only way available to compute the conversion ITRF <=> PEF (the models are highly imprecise since the motion is still not very well understood [1]). However, the EOP data related to the nutation of the obliquity (δΔϵ_1980) and the nutation of the longitude (δΔψ_1980) can be omitted. In this case, the GCRF frame is what is usually called J2000 reference frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_gcrf_to_mj2000_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_gcrf_to_mj2000_iau2006","text":"r_gcrf_to_mj2000_iau2006([T, ]jd_tt::Number = 0) -> T\n\nCompute the rotation that aligns the Geocentric Celestial Reference Frame (GCRF) with the J2000 mean equatorial frame. This algorithm uses the IAU-2006 theory.  Notice that this rotation is just a bias matrix that does not depend on the date. However, this function receives the argument jd_tt just to keep the API compatibility.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nAccording to [1], the frame bias that converts MJ2000 <=> GCRF is not a precise transformation for all the times.\n\nReturns\n\nT: The rotation that aligns the MJ2000 frame with the MOD frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_gcrf_to_mod_fk5-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_gcrf_to_mod_fk5","text":"r_gcrf_to_mod_fk5([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the Geocentric Celestial Reference Frame (GCRF) with the Mean of Date (MOD) frame at the Julian Day [Terrestrial Time] jd_tt.  This algorithm uses the IAU-76/FK5 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the GCRF frame with the MOD frame.\n\nRemarks\n\nThe Geocentric Celestial Reference Frame (GCRF) is rotated into the Mean of Date (MOD) frame considering the IAU 1976 Precession model.\n\nNotice that if the conversion MOD => TOD is performed without considering the EOP corrections, then the GCRF in this rotation is what is usually called the J2000 reference frame.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_gcrf_to_teme","page":"Library","title":"SatelliteToolboxTransformations.r_gcrf_to_teme","text":"r_gcrf_to_teme([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the GCRF frame with the True Equator Mean Equinox (TEME) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p. 233).  Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nThe EOP data related to the nutation of the obliquity (δΔϵ_1980) and the nutation of the longitude (δΔψ_1980) can be omitted. In this case, the GCRF frame is what is usually called J2000 reference frame.\n\nReturns\n\nT: The rotation that aligns the GCRF frame with the TEME frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_itrf_to_gcrf_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_itrf_to_gcrf_fk5","text":"r_itrf_to_gcrf_fk5([T, ]jd_ut1::Number, jd_tt::Number, x_p::Number, y_p::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the International Terrestrial Reference Frame (ITRF) with the Geocentric Celestial Reference Frame (GCRF) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time], and considering the IERS EOP Data x_p [rad], y_p [rad], δΔϵ_1980 [rad], and δΔψ_1980 [rad] (see fetch_iers_eop). This algorithm uses the IAU-76/FK5 theory.\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian). δΔϵ_1980 is the nutation in obliquity. δΔψ_1980 is the nutation in longitude.\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the ITRF frame with the GCRF frame.\n\nRemarks\n\nThe EOP data related to the polar motion (x_p and y_p) is required, since this is the only way available to compute the conversion ITRF <=> PEF (the models are highly imprecise since the motion is still not very well understood [1]). However, the EOP data related to the nutation of the obliquity (δΔϵ_1980) and the nutation of the longitude (δΔψ_1980) can be omitted. In this case, the GCRF frame is what is usually called J2000 reference frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_itrf_to_pef_fk5-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.r_itrf_to_pef_fk5","text":"r_itrf_to_pef_fk5([T, ]x_p::Number, y_p::Number) -> T\n\nCompute the rotation that aligns the International Terrestrial Reference Frame (ITRF) with the Pseudo-Earth Fixed (PEF) frame considering the polar motion represented by the angles x_p [rad] and y_p [rad] that are obtained from IERS EOP Data (see fetch_iers_eop).\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the ITRF frame with the PEF frame.\n\nRemarks\n\nThe ITRF is defined based on the International Reference Pole (IRP), which is the location of the terrestrial pole agreed by international committees [1].  The Pseudo-Earth Fixed, on the other hand, is defined based on the Earth axis of rotation, or the Celestial Intermediate Pole (CIP). Hence, PEF XY-plane contains the True Equator. Furthermore, since the recovered latitude and longitude are sensitive to the CIP, then it should be computed considering the PEF frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_itrf_to_tirs_iau2006-Tuple{Number, Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.r_itrf_to_tirs_iau2006","text":"r_itrf_to_tirs_iau2006([T, ]jd_tt::Number, x_p::Number, y_p::Number) -> T\n\nCompute the rotation that aligns the International Terrestrial Reference Frame (ITRF) with the Terrestrial Intermediate Reference System (TIRS) considering the polar motion represented by the angles x_p [rad] and y_p [rad] that are obtained from IERS EOP Data (see fetch_iers_eop).\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the ITRF frame with the TIRS frame.\n\nRemarks\n\nThe ITRF is defined based on the International Reference Pole (IRP), which is the location of the terrestrial pole agreed by international committees [1].  The Terrestrial Intermediate Reference Frame (TIRS), on the other hand, is defined based on the Earth axis of rotation, or the Celestial Intermediate Pole (CIP). Hence, TIRS XY-plane contains the True Equator. Furthermore, since the recovered latitude and longitude are sensitive to the CIP, then it should be computed considering the TIRS frame.\n\nThe TIRS and PEF (IAU-76/FK5) are virtually the same reference frame, but according to [1] it is convenient to separate the names as the exact formulae differ.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mj2000_to_gcrf_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_mj2000_to_gcrf_iau2006","text":"r_mj2000_to_gcrf_iau2006([T, ]jd_tt::Number = 0) -> T\n\nCompute the rotation that aligns the J2000 mean equatorial frame with the Geocentric Celestial Reference Frame (GCRF). This algorithm uses the IAU-2006 theory. Notice that this rotation is just a bias matrix that does not depend on the date. However, this function receives the argument jd_tt just to keep the API compatibility.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nAccording to [1], the frame bias that converts MJ2000 <=> GCRF is not a precise transformation for all the times.\n\nReturns\n\nT: The rotation that aligns the MJ2000 frame with the MOD frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mj2000_to_mod_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_mj2000_to_mod_iau2006","text":"r_mj2000_to_mod_iau2006([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the J2000 mean equatorial frame with the Mean of Date (MOD) reference frame with the at Julian day jd_tt [Terrestrial Time].  This algorithm uses the IAU-2006 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MJ2000 frame with the MOD frame.\n\nRemarks\n\nThe J2000 reference frame here is not equal to the previous definition in FK5 theory. It is the reason why it is internally called MJ2000. According to [1]:\n\nThe mean equinox of J2000.0 to be considered is not the “rotational dynamical mean equinox of J2000.0” as used in the past, but the “inertial dynamical mean equinox of J2000.0” to which the recent numerical or analytical solutions refer.  The latter is associated with the ecliptic in the inertial sense, which is the plane perpendicular to the angular momentum vector of the orbital motion of the Earth-Moon barycenter as computed from the velocity of the barycenter relative to an inertial system. The rotational equinox is associated with the ecliptic in the rotational sense, which is perpendicular to the angular momentum vector computed from the velocity referred to the rotating orbital plane of the Earth-Moon barycenter. (The difference between the two angular momenta is the angular momentum associated with the rotation of the orbital plane.)\n\nReferences\n\n[1]: IERS (2010). Transformation between the International Terrestrial Reference   System and the Geocentric Celestial Reference System. IERS Technical Note No. 36,   Chapter 5.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_ers_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_ers_iau2006","text":"r_mod_to_ers_iau2006([T, ]jd_tt::Number, δΔϵ_2000::Number = 0, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) reference frame with the Earth Reference System (ERS) at Julian day jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in obliquity (δΔϵ_2000) and in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ). This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the ERS frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_gcrf_fk5-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_gcrf_fk5","text":"r_mod_to_gcrf_fk5([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) frame with the Geocentric Celestial Reference Frame (GCRF) at the Julian Day [Terrestrial Time] jd_tt. This algorithm uses the IAU-76/FK5 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the GCRF frame.\n\nRemarks\n\nThe Mean of Date (MOD) frame is rotated into the Geocentric Celestial Reference Frame (GCRF) considering the IAU 1976 Precession model.\n\nNotice that if the conversion TOD => MOD is performed without considering the EOP corrections, then the GCRF obtained by this rotation is what is usually called the J2000 reference frame.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_mj2000_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_mj2000_iau2006","text":"r_mod_to_mj2000_iau2006([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) reference frame with the J2000 mean equatorial frame at Julian day jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the MJ2000 frame.\n\nRemarks\n\nThe J2000 reference frame here is not equal to the previous definition in FK5 theory. It is the reason why it is internally called MJ2000. According to [1]:\n\nThe mean equinox of J2000.0 to be considered is not the “rotational dynamical mean equinox of J2000.0” as used in the past, but the “inertial dynamical mean equinox of J2000.0” to which the recent numerical or analytical solutions refer.  The latter is associated with the ecliptic in the inertial sense, which is the plane perpendicular to the angular momentum vector of the orbital motion of the Earth-Moon barycenter as computed from the velocity of the barycenter relative to an inertial system. The rotational equinox is associated with the ecliptic in the rotational sense, which is perpendicular to the angular momentum vector computed from the velocity referred to the rotating orbital plane of the Earth-Moon barycenter. (The difference between the two angular momenta is the angular momentum associated with the rotation of the orbital plane.)\n\nReferences\n\n[1]: IERS (2010). Transformation between the International Terrestrial Reference   System and the Geocentric Celestial Reference System. IERS Technical Note No. 36,   Chapter 5.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_pef_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_pef_fk5","text":"r_mod_to_pef_fk5([T, ]jd_ut1::Number, jd_tt::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) reference frame with the Pseudo-Earth Fixed (PEF) frame at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the PEF frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_teme","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_teme","text":"r_mod_to_teme([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) frame with the True Equator Mean Equinox (TEME) frame at the Julian Day jd_tt [Terrestrial Time].  This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p.  233). Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).  .\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the TEME frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_tirs_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_tirs_iau2006","text":"r_mod_to_tirs_iau2006([T, ]jd_ut1::Number, jd_tt::Number, δΔϵ_2000::Number = 0, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) reference frame with the Terrestrial Intermediate Reference System (TIRS) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in obliquity (δΔϵ_2000) and in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ).  This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nThis composed rotation TIRS <=> ERS <=> MOD is implemented as a new function because the single rotations TIRS <=> ERS and ERS <=> MOD call the function nutation_eo, which has a high computational burden. In this case, the composed algorithm is about 2x faster than calling those function separately.\n\nReturns\n\nT: The rotation that aligns the TIRS frame with the ERS frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_mod_to_tod_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_mod_to_tod_fk5","text":"r_mod_to_tod_fk5([T, ]jd_tt::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the Mean of Date (MOD) frame with the True of Date (TOD) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the MOD frame with the TOD frame.\n\nRemarks\n\nThe Mean of Date (MOD) frame is rotated into the True of Date (TOD) frame considering the 1980 IAU Theory of Nutation. The IERS EOP corrections must be added if one wants to make the rotation consistent with the Geocentric Celestial Reference Systems (GCRS).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_pef_to_itrf_fk5-Tuple{Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.r_pef_to_itrf_fk5","text":"r_pef_to_itrf_fk5([T, ]x_p::Number, y_p::Number) -> T\n\nCompute the rotation that aligns the Pseudo-Earth Fixed (PEF) with the International Terrestrial Reference Frame (ITRF) considering the polar motion represented by the angles x_p [rad] and y_p [rad] that are obtained from IERS EOP Data (see fetch_iers_eop).\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the PEF frame with the ITRF.\n\nRemarks\n\nThe ITRF is defined based on the International Reference Pole (IRP), which is the location of the terrestrial pole agreed by international committees [1].  The Pseudo-Earth Fixed, on the other hand, is defined based on the Earth axis of rotation, or the Celestial Intermediate Pole (CIP). Hence, PEF XY-plane contains the True Equator. Furthermore, since the recovered latitude and longitude are sensitive to the CIP, then it should be computed considering the PEF frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_pef_to_mod_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_pef_to_mod_fk5","text":"r_pef_to_mod_fk5([T, ]jd_ut1::Number, jd_tt::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the Pseudo-Earth Fixed (PEF) frame with the Mean of Date (MOD) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the PEF frame with the TOD frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_pef_to_teme-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_pef_to_teme","text":"r_pef_to_teme([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the Pseudo-Earth Fixed (PEF) frame with the True Equator Mean Equinox (TEME) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p. 233).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the PEF frame with the TEME frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_pef_to_tod_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_pef_to_tod_fk5","text":"r_pef_to_tod_fk5([T, ]jd_ut1::Number, jd_tt::Number[, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the Pseudo-Earth Fixed (PEF) frame with the True of Date (TOD) frame at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide correction for the nutation in longitude (δΔψ_1980) [rad] that is usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the PEF frame with the TOD frame.\n\nRemarks\n\nThe Pseudo-Earth Fixed (PEF) frame is rotated into the True of Date (TOD) frame considering the 1980 IAU Theory of Nutation. The IERS EOP corrections must be added if one wants to make the rotation consistent with the Geocentric Celestial Reference Systems (GCRS).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_teme_to_gcrf","page":"Library","title":"SatelliteToolboxTransformations.r_teme_to_gcrf","text":"r_teme_to_gcrf([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the True Equator Mean Equinox (TEME) frame with the Geocentric Celestial Reference Frame (GCRF) at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p. 233). Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nThe EOP data related to the nutation of the obliquity (δΔϵ_1980) and the nutation of the longitude (δΔψ_1980) can be omitted. In this case, the GCRF frame is what is usually called J2000 reference frame.\n\nReturns\n\nT: The rotation that aligns the TEME frame with the GCRF frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_teme_to_mod","page":"Library","title":"SatelliteToolboxTransformations.r_teme_to_mod","text":"r_teme_to_mod([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the True Equator Mean Equinox (TEME) frame with the Mean of Date (MOD) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p. 233).  Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TEME frame with the MOD frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_teme_to_pef-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_teme_to_pef","text":"r_teme_to_pef([T, ]jd_tt::Number) -> T\n\nCompute the rotation that aligns the True Equator Mean Equinox (TEME) frame with the Pseudo-Earth Fixed (PEF) frame at the Julian Day jd_tt [Terrestrial Time].  This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p.  233).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TEME frame with the PEF frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_teme_to_tod","page":"Library","title":"SatelliteToolboxTransformations.r_teme_to_tod","text":"r_teme_to_tod([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the True Equator Mean Equinox (TEME) frame with the True of Date (TOD) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p. 233).  Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TEME frame with the TOD frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tirs_to_cirs_iau2006-Tuple{Number}","page":"Library","title":"SatelliteToolboxTransformations.r_tirs_to_cirs_iau2006","text":"r_tirs_to_cirs_iau2006([T, ]jd_ut1::Number) -> T\n\nCompute the rotation that aligns the Terrestrial Intermediate Reference System (TIRS) with the Celestial Intermediate Reference System (CIRS) at the Julian Day jd_ut1 [UT1]. This algorithm uses the IAU-2006 theory.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TIRS frame with the CIRS frame.\n\nRemarks\n\nThe reference frames TIRS and CIRS are separated by a rotation about the Z-axis of the Earth Rotation Angle, which is the angle between the Conventional International Origin (CIO) and the Terrestrial Intermediate Origin (TIO) [1].  The latter is a reference meridian on Earth that is located about 100m away from Greenwich meridian along the equator of the Celestial Intermediate Pole (CIP) [1].\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tirs_to_ers_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_tirs_to_ers_iau2006","text":"r_tirs_to_ers_iau2006([T, ]jd_ut1::Number, jd_tt::Number, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Terrestrial Intermediate Reference System (TIRS) with the Earth Reference System (ERS) at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ). This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TIRS frame with the ERS frame.\n\nRemarks\n\nThe reference frames TIRS and ERS are separated by a rotation about the Z-axis of the Greenwhich apparent sidereal angle (GAST). This angle is computed using the IAU-2006 theory, which consist of obtaining the Earth Rotation Angle (ERA) and subtracting the result of the Equation of Origins (EO).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tirs_to_itrf_iau2006-Tuple{Number, Number, Number}","page":"Library","title":"SatelliteToolboxTransformations.r_tirs_to_itrf_iau2006","text":"r_tirs_to_itrf_iau2006([T, ]jd_tt::Number, x_p::Number, y_p::Number) -> T\n\nCompute the rotation that aligns the Terrestrial Intermediate Reference System (TIRS) with the International Terrestrial Reference Frame (ITRF) considering the polar motion represented by the angles x_p [rad] and y_p [rad] that are obtained from IERS EOP Data (see fetch_iers_eop).\n\nx_p is the polar motion displacement about X-axis, which is the IERS Reference Meridian direction (positive south along the 0˚ longitude meridian). y_p is the polar motion displacement about Y-axis (90˚W or 270˚E meridian).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TIRS frame with the ITRF frame.\n\nRemarks\n\nThe ITRF is defined based on the International Reference Pole (IRP), which is the location of the terrestrial pole agreed by international committees [1]. The Terrestrial Intermediate Reference Frame (TIRS), on the other hand, is defined based on the Earth axis of rotation, or the Celestial Intermediate Pole (CIP). Hence, TIRS XY-plane contains the True Equator. Furthermore, since the recovered latitude and longitude are sensitive to the CIP, then it should be computed considering the TIRS frame.\n\nThe TIRS and PEF (IAU-76/FK5) are virtually the same reference frame, but according to [1] it is convenient to separate the names as the exact formulae differ.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications.  Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tirs_to_mod_iau2006","page":"Library","title":"SatelliteToolboxTransformations.r_tirs_to_mod_iau2006","text":"r_tirs_to_mod_iau2006([T, ]jd_ut1::Number, jd_tt::Number, δΔϵ_2000::Number = 0, δΔΨ_2000::Number = 0) -> T\n\nCompute the rotation that aligns the Terrestrial Intermediate Reference System (TIRS) with the Mean of Date (MOD) reference frame at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-2006 theory.\n\nNotice that one can provide corrections for the nutation in obliquity (δΔϵ_2000) and in longitude (δΔψ_2000) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop and compute_δΔϵ_δΔψ).  This corrections are related to Free Core Nutation (FCN) that models the effect of a liquid Earth core.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\ninfo: Info\nThis composed rotation TIRS <=> ERS <=> MOD is implemented as a new function because the single rotations TIRS <=> ERS and ERS <=> MOD call the function nutation_eo, which has a high computational burden. In this case, the composed algorithm is about 2x faster than calling those function separately.\n\nReturns\n\nT: The rotation that aligns the TIRS frame with the ERS frame.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tod_to_mod_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_tod_to_mod_fk5","text":"r_tod_to_mod_fk5([T, ]jd_tt::Number[, δΔϵ_1980::Number, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the True of Date (TOD) frame with the Mean of Date (MOD) frame at the Julian Day jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TOD frame with the MOD frame.\n\nRemarks\n\nThe True of Date (TOD) frame is rotated into the Mean of Date (MOD) frame considering the 1980 IAU Theory of Nutation. The IERS EOP corrections must be added if one wants to make the rotation consistent with the Geocentric Celestial Reference Systems (GCRS).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tod_to_pef_fk5","page":"Library","title":"SatelliteToolboxTransformations.r_tod_to_pef_fk5","text":"r_tod_to_pef_fk5([T, ]jd_ut1::Number, jd_tt::Number[, δΔψ_1980::Number]) -> T\n\nCompute the rotation that aligns the True of Date (TOD) frame with the Pseudo-Earth Fixed (PEF) frame at the Julian Day jd_ut1 [UT1] and jd_tt [Terrestrial Time]. This algorithm uses the IAU-76/FK5 theory. Notice that one can provide correction for the nutation in longitude (δΔψ_1980) [rad] that is usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe Julian Day in UT1 is used to compute the Greenwich Mean Sidereal Time (GMST) (see jd_to_gmst), whereas the Julian Day in Terrestrial Time is used to compute the nutation in the longitude. Notice that the Julian Day in UT1 and in Terrestrial Time must be equivalent, i.e. must be related to the same instant.  This function does not check this.\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TOD frame with the PEF frame.\n\nRemarks\n\nThe True of Date (TOD) frame is rotated into the Pseudo-Earth Fixed (PEF) frame considering the 1980 IAU Theory of Nutation. The IERS EOP corrections must be added if one wants to make the rotation consistent with the Geocentric Celestial Reference Systems (GCRS).\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.r_tod_to_teme","page":"Library","title":"SatelliteToolboxTransformations.r_tod_to_teme","text":"r_tod_to_teme([T, ]jd_tt::Number[, δΔϵ_1980::Number = 0, δΔψ_1980::Number = 0]) -> T\n\nCompute the rotation that aligns the True of Date (TOD) frame with the True Equator Mean Equinox (TEME) frame at the Julian Day jd_tt [Terrestrial Time].  This algorithm uses the IAU-76/FK5 theory and TEME definition in [1](p.  233). Notice that one can provide corrections for the nutation in obliquity (δΔϵ_1980) [rad] and in longitude (δΔψ_1980) [rad] that are usually obtained from IERS EOP Data (see fetch_iers_eop).\n\nThe rotation type is described by the optional variable T. If it is DCM, then a DCM will be returned. Otherwise, if it is Quaternion, then a Quaternion will be returned. In case this parameter is omitted, then it falls back to DCM.\n\nReturns\n\nT: The rotation that aligns the TOD frame with the TEME frame.\n\nReferences\n\n[1]: Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. Microcosm   Press, Hawthorn, CA, USA.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxTransformations.read_iers_eop-Tuple{String}","page":"Library","title":"SatelliteToolboxTransformations.read_iers_eop","text":"read_iers_eop(filename::String[, data_type]) -> EopIau1980 | EopIau2000A\n\nRead IERS EOP data from the file filename. The user must specify if the data is related to the model IAU 1980 (data_type = Val(:IAU1980)), which is the default, or to the model IAU 2000A (data_type = Val(:IAU2000A)).\n\nnote: Note\nThe input file must be exactly the same as provided by IERS in CSV format. One can download it using the following commands:IAU 1980\ncurl -O https://datacenter.iers.org/data/csv/finals.all.csv   wget https://datacenter.iers.org/data/csv/finals.all.csv\nIAU 2000A\ncurl -O https://datacenter.iers.org/data/csv/finals2000A.all.csv   wget https://datacenter.iers.org/data/csv/finals2000A.all.csv\n\nReturns\n\nEopIau1980 or EopIau2000A, depending on data_type: An object with   the interpolations of the EOP. Notice that the interpolation indexing is set to the   Julian Day.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.sv_ecef_to_ecef-Union{Tuple{N}, Tuple{OrbitStateVector, Vararg{Any, N}}} where N","page":"Library","title":"SatelliteToolboxTransformations.sv_ecef_to_ecef","text":"sv_ecef_to_ecef(sv::OrbitStateVector, args...) -> OrbitStateVector\n\nConvert the orbit state vector sv from an ECEF frame to another ECEF frame.  The arguments args... must match those of the function r_ecef_to_ecef without the rotation representation.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.sv_ecef_to_eci-Tuple{OrbitStateVector, Val{:ITRF}, Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.sv_ecef_to_eci","text":"sv_ecef_to_eci(sv::OrbitStateVector, ECEF, ECI, jd_utc[, eop]) -> OrbitStateVector\n\nConvert the orbit state vector sv from the Earth-Centered, Earth-Fixed (ECEF) reference frame ECEF to the Earth-Centered Inertial (ECI) reference frame at the Julian day jd_utc [UTC]. The eop may be required depending on the selection of the input and output reference system. For more information, see the documentation of the function r_ecef_to_eci.\n\ninfo: Info\nIt is assumed that the input velocity and acceleration in sv are obtained by an observer on the ECEF frame. Thus, the output will contain the velocity and acceleration as measured by an observer on the ECI frame.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.sv_eci_to_ecef-Tuple{OrbitStateVector, Union{Val{:GCRF}, Val{:J2000}, Val{:TOD}, Val{:MOD}, Val{:TEME}}, Val{:ITRF}, Number, EopIau1980}","page":"Library","title":"SatelliteToolboxTransformations.sv_eci_to_ecef","text":"sv_eci_to_ecef(sv::OrbitStateVector, ECI, ECEF, jd_utc[, eop]) -> OrbitStateVector\n\nConvert the orbit state vector sv from the Earth-Centered Inertial (ECI) reference frame ECI to the Earth-Centered, Earth-Fixed (ECEF) reference frame at the Julian day jd_utc [UTC]. The eop may be required depending on the selection of the input and output reference system. For more information, see the documentation of the function r_eci_to_ecef.\n\ninfo: Info\nIt is assumed that the input velocity and acceleration in sv are obtained by an observer on the ECI frame. Thus, the output will contain the velocity and acceleration as measured by an observer on the ECEF frame.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxTransformations.sv_eci_to_eci-Tuple{OrbitStateVector, Vararg{Any}}","page":"Library","title":"SatelliteToolboxTransformations.sv_eci_to_eci","text":"sv_eci_to_eci(sv::OrbitStateVector, args...) -> OrbitStateVector\n\nConvert the orbit state vector sv from an ECI frame to another ECI frame. The arguments args... must match those of the function r_eci_to_eci without the rotation representation.\n\n\n\n\n\n","category":"method"},{"location":"man/orbit_representations/#Transformations-of-Orbit-Representations","page":"Orbit representations","title":"Transformations of Orbit Representations","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"CurrentModule = SatelliteToolboxTransformations","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"using SatelliteToolboxTransformations","category":"page"},{"location":"man/orbit_representations/#Orbit-State-Vector","page":"Orbit representations","title":"Orbit State Vector","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"We provide a set of functions to transform an OrbitStateVector between any frame described in Transformations Between ECEF and ECI Reference Frames.","category":"page"},{"location":"man/orbit_representations/#From-ECI-to-ECI","page":"Orbit representations","title":"From ECI to ECI","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The function","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"sv_eci_to_eci(sv::OrbitStateVector, args...) -> OrbitStateVector","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"can be used to transform the OrbitStateVector sv from one ECI frame to another. The arguments args... must match those of the function r_eci_to_eci without the rotation representation.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The following example shows how we can convert a state vector from the MOD (Mean of Date) reference frame to the TOD (True of Date) reference frame:","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"jd_utc = date_to_jd(2004, 4, 6, 7, 51, 28.386009)\n\nr_mod  = [5094.02837450; 6127.87081640; 6380.24851640]\n\nv_mod  = [-4.7462630520; 0.7860140450; 5.5317905620]\n\nsv_mod = OrbitStateVector(jd_utc, r_mod, v_mod)\n\nsv_tod = sv_eci_to_eci(sv_mod, MOD(), jd_utc, TOD(), jd_utc)","category":"page"},{"location":"man/orbit_representations/#From-ECI-to-ECEF","page":"Orbit representations","title":"From ECI to ECEF","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The function","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"sv_eci_to_ecef(sv::OrbitStateVector, ECI, ECEF, jd_utc[, eop]) -> OrbitStateVector","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"can be used to convert the orbit state vector sv from the Earth-Centered Inertial (ECI) reference frame ECI to the Earth-Centered, Earth-Fixed (ECEF) reference frame at the Julian day jd_utc [UTC]. The eop may be required depending on the selection of the input and output reference system. For more information, see the documentation of the function r_eci_to_ecef.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"info: Info\nIt is assumed that the input velocity and acceleration in sv are obtained by an observer on the ECI frame. Thus, the output will contain the velocity and acceleration as measured by an observer on the ECEF frame.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The following example shows how we can convert a state vector from the J2000 reference frame reference frame to PEF (True of Date) reference frame:","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"jd_ut1 = date_to_jd(2004, 4, 6, 7, 51, 28.386009) - 0.4399619 / 86400\n\nr_j2000  = [5102.50960000; 6123.01152000; 6378.13630000]\n\nv_j2000  = [-4.7432196000; 0.7905366000; 5.5337561900]\n\nsv_j2000 = OrbitStateVector(jd_ut1, r_j2000, v_j2000)\n\nsv_pef   = sv_eci_to_ecef(sv_j2000, J2000(), PEF(), jd_ut1)","category":"page"},{"location":"man/orbit_representations/#From-ECEF-to-ECI","page":"Orbit representations","title":"From ECEF to ECI","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The function","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"sv_ecef_to_eci(sv::OrbitStateVector, ECEF, ECI, jd_utc[, eop]) -> OrbitStateVector","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"can be used to convert the orbit state vector sv from the Earth-Centered, Earth-Fixed (ECEF) reference frame ECEF to the Earth-Centered Inertial (ECI) reference frame at the Julian day jd_utc [UTC]. The eop may be required depending on the selection of the input and output reference system. For more information, see the documentation of the function r_ecef_to_eci.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"info: Info\nIt is assumed that the input velocity and acceleration in sv are obtained by an observer on the ECEF frame. Thus, the output will contain the velocity and acceleration as measured by an observer on the ECI frame.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The following example shows how we can convert a state vector from the PEF reference frame reference frame to J2000 reference frame:","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"jd_ut1 = date_to_jd(2004, 4, 6, 7, 51, 28.386009) - 0.4399619 / 86400\n\nr_pef = [-1033.47503130; 7901.30558560; 6380.34453270]\n\nv_pef = [-3.2256327470; -2.8724425110; +5.5319312880]\n\nsv_pef   = OrbitStateVector(jd_ut1, r_pef, v_pef)\n\nsv_j2000 = sv_ecef_to_eci(sv_pef, PEF(), J2000(), jd_ut1)","category":"page"},{"location":"man/orbit_representations/#From-ECEF-to-ECEF","page":"Orbit representations","title":"From ECEF to ECEF","text":"","category":"section"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The function","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"sv_ecef_to_ecef(sv::OrbitStateVector, args...) -> OrbitStateVector","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"can be used to transform the orbit state vector sv from an ECEF frame to another ECEF frame. The arguments args... must match those of the function r_ecef_to_ecef wihtout the rotation representation.","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"The following example shows how we can convert a state vector from the ITRF reference frame reference frame to PEF reference frame:","category":"page"},{"location":"man/orbit_representations/","page":"Orbit representations","title":"Orbit representations","text":"eop_iau1980 = fetch_iers_eop()\n\njd_utc = date_to_jd(2004, 4, 6, 7, 51, 28.386009)\n\nr_itrf = [-1033.4793830; 7901.2952754; 6380.3565958]\n\nv_itrf = [-3.225636520; -2.872451450; +5.531924446]\n\nsv_itrf = OrbitStateVector(jd_utc, r_itrf, v_itrf)\n\nsv_pef = sv_ecef_to_ecef(sv_itrf, ITRF(), PEF(), jd_utc, eop_iau1980)","category":"page"},{"location":"man/ecef_eci/#Transformations-Between-ECEF-and-ECI-Reference-Frames","page":"ECI and ECEF","title":"Transformations Between ECEF and ECI Reference Frames","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"CurrentModule = SatelliteToolboxTransformations","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"using SatelliteToolboxTransformations","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"This package currently provides two models to transform reference systems: the IAU-76/FK5 and the IAU-2006/2010 (CIO and Equinox-based approach). The following table lists the available coordinate frames and how they can be referenced in the functions that will be described later on.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"Reference Type Coordinate frame name\nITRF() ECEF International terrestrial reference frame\nPEF() ECEF Pseudo-earth fixed reference frame\nTIRS() ECEF Terrestrial intermediate reference system\nERS() ECEF Earth reference system\nMOD() ECI Mean-of-date reference frame\nTOD() ECI True-of-data reference frame\nGCRF() ECI Geocentric celestial reference frame (GCRF)\nJ2000() ECI J2000 reference frame\nTEME() ECI True equator, mean equinox reference frame\nCIRS() ECI Celestial intermediate reference system\nMOD06() ECI Mean-of-date reference frame (IAU-2006/2010)\nMJ2000() ECI J2000 mean equatorial frame","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"note: Note\nECEF stands for Earth-Centered, Earth-Fixed whereas ECI stands for Earth-Centered Inertial.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"warning: Warning\nIn all the functions that will be presented here, it is not possible to mix frames between the IAU-76/FK5 and IAU-2006/2010 models in the same call.  Hence, if it is required to compute the rotation between frames in different models, then the recommended approach is to first compute the rotation from the origin frame to the ITRF or GCRF, and then compute the rotation from the ITRF or GCRF to the destination frame. However, this will only work for past dates since the Earth orientation parameters are required.","category":"page"},{"location":"man/ecef_eci/#Earth-orientation-parameters-(EOP)","page":"ECI and ECEF","title":"Earth orientation parameters (EOP)","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"Some conversions here requires additional data related to the Earth orientation.  This information is provided by IERS (International Earth Rotation and Reference Systems Service). This package has the capability to automatically download and parse the IERS EOP (Earth Orientation Parameters).","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"The function that will automatically download the files, store them in the package scratch space, and parse the data is:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"fetch_iers_eop([data_type]; kwargs...)","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"in which data_type specifies what EOP type is desired (Val(:IAU1980) for IAU1980 and Val(:IAU2000A) for IAU2000A). If omitted, then it defaults to Val(:IAU1980).","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"This function returns an instance of the structure EopIau1980 or EopIau2000A depending on the selection of data_type. The returned value should be passed to the reference frame conversion functions as described in the following.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"The following keywords are available:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"force_download::Bool: If the EOP file exists and is less than 7 days old, it will not be   downloaded again. A new download can be forced by setting this keyword to true.   (Default = false)\nurl::String: URL of the EOP file.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"eop_iau1980 = fetch_iers_eop()\n\neop_iau2000a = fetch_iers_eop(Val(:IAU2000A))","category":"page"},{"location":"man/ecef_eci/#ECEF-to-ECEF","page":"ECI and ECEF","title":"ECEF to ECEF","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"One ECEF frame can be converted to another one by the following function:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_ecef_to_ecef([T,] ECEFo, ECEFf, JD_UTC::Number, eop) -> T","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"where it will be computed the rotation from the ECEF reference frame ECEFo to the ECEF reference frame ECEFf at the Julian Day [UTC] JD_UTC. The rotation description that will be used is given by T, which can be DCM or Quaternion. If T is omitted, then it defaults to DCM. The eop in this case is always necessary. Hence, the user must initialize it as described in the section Earth orientation parameters (EOP).","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_ecef_to_ecef(PEF(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_ecef(TIRS(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau2000a)\n\nr_ecef_to_ecef(Quaternion, PEF(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_ecef(Quaternion, TIRS(), ITRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau2000a)","category":"page"},{"location":"man/ecef_eci/#ECI-to-ECI","page":"ECI and ECEF","title":"ECI to ECI","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"One ECI frame can be converted to another ECI frame by one of the following functions:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_eci_to_eci([T,] ECIo, ECIf, JD_UTC::Number[, eop]) -> T\nr_eci_to_eci([T,] ECIo, JD_UTCo::Number, ECIf, JD_UTCf::Number[, eop]) -> T","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"where it will be computed compute the rotation from the ECI reference frame ECIo to another ECI reference frame ECIf. If the origin and destination frame contain only one of date frame, then the first signature is used and JD_UTC is the epoch of this frame. On the other hand, if the origin and destination frame contain two of date frame[1], e.g. TOD => MOD, then the second signature must be used in which JD_UTCo is the epoch of the origin frame and JD_UTCf is the epoch of the destination frame. The rotation description that will be used is given by T, which can be DCM or Quaternion. If T is omitted, then it defaults to DCM. The EOP data eop_data, as described in section Earth orientation parameters (EOP), is required in some conversions, as described in the following table.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"[1]: TEME is an of date frame.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"Model ECIo ECIf EOP Data Function Signature\nIAU-76/FK5 GCRF J2000 EOP IAU1980 First\nIAU-76/FK5 GCRF MOD EOP IAU1980 First\nIAU-76/FK5 GCRF TOD EOP IAU1980 First\nIAU-76/FK5 GCRF TEME EOP IAU1980 First\nIAU-76/FK5 J2000 GCRF EOP IAU1980 First\nIAU-76/FK5 J2000 MOD Not required First\nIAU-76/FK5 J2000 TOD Not required First\nIAU-76/FK5 J2000 TEME Not required First\nIAU-76/FK5 MOD GCRF EOP IAU1980 First\nIAU-76/FK5 MOD J2000 Not required First\nIAU-76/FK5 MOD TOD Not required Second\nIAU-76/FK5 MOD TEME Not required Second\nIAU-76/FK5 TOD GCRF EOP IAU1980 First\nIAU-76/FK5 TOD J2000 Not required First\nIAU-76/FK5 TOD MOD Not required Second\nIAU-76/FK5 TOD TEME Not required Second\nIAU-76/FK5 TEME GCRF EOP IAU1980 First\nIAU-76/FK5 TEME J2000 Not required First\nIAU-76/FK5 TEME MOD Not required Second\nIAU-76/FK5 TEME TOD Not required Second\nIAU-2006/2010 CIO-based GCRF CIRS Not required¹ First\nIAU-2006/2010 CIO-based CIRS CIRS Not required¹ Second\nIAU-2006/2010 Equinox-based GCRF MJ2000 Not required First²\nIAU-2006/2010 Equinox-based GCRF MOD06 Not required First\nIAU-2006/2010 Equinox-based GCRF ERS Not required³ First\nIAU-2006/2010 Equinox-based MJ2000 GCRF Not required First²\nIAU-2006/2010 Equinox-based MJ2000 MOD06 Not required First\nIAU-2006/2010 Equinox-based MJ2000 ERS Not required³ First\nIAU-2006/2010 Equinox-based MOD06 GCRF Not required First\nIAU-2006/2010 Equinox-based MOD06 MJ2000 Not required First\nIAU-2006/2010 Equinox-based MOD06 ERS Not required³ First\nIAU-2006/2010 Equinox-based ERS GCRF Not required³ First\nIAU-2006/2010 Equinox-based ERS MJ2000 Not required³ First\nIAU-2006/2010 Equinox-based ERS MOD06 Not required³ First","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"¹: In this case, the terms that account for the free-core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF will not be available, reducing the precision.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"²: The transformation between GCRF and MJ2000 is a constant rotation matrix called bias. Hence, the date does not modify it. However, this signature was kept to avoid complications in the API.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"³: In this case, the terms that corrects the nutation in obliquity and in longitude due to the free core nutation will not be available, reducing the precision.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"note: Note\nIn this function, if EOP corrections are not provided, then MOD and TOD frames will be computed considering the original IAU-76/FK5 theory.  Otherwise, the corrected frame will be used.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_eci_to_eci(DCM, GCRF(), J2000(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_eci(Quaternion, TEME(), GCRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_eci(\n    TOD(),\n    date_to_jd(1986, 6, 19, 21, 35, 0),\n    TOD(),\n    date_to_jd(1987, 5, 19 , 3, 0, 0),\n    eop_iau1980\n)\n\nr_eci_to_eci(Quaternion, TOD(), 2451545.0, MOD(), 2451545.0, eop_iau1980)\n\nr_eci_to_eci(J2000(), TEME(), date_to_jd(1986, 6, 19, 21, 35, 0))\n\nr_eci_to_eci(CIRS(), GCRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau2000a)\n\nr_eci_to_eci(Quaternion, CIRS(), GCRF(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau2000a)\n\nr_eci_to_eci(DCM, GCRF(), J2000(), date_to_jd(1986, 6, 19, 21, 35, 0), eop_iau1980)","category":"page"},{"location":"man/ecef_eci/#ECEF-to-ECI","page":"ECI and ECEF","title":"ECEF to ECI","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"One ECEF frame can be convert to one ECI frame using the following function:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_ecef_to_eci([T,] ECEF, ECI, JD_UTC::Number[, eop]) -> T","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"where it will be compute the rotation from the ECEF frame ECEF to the ECI frame ECI at the Julian Day [UTC] JD_UTC. The rotation description that will be used is given by T, which can be DCM or Quaternion. If it is omitted, then it defaults to DCM. The EOP data eop_data, as described in section Earth orientation parameters (EOP), is required in some conversions, as described in the following table.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"Model ECEF ECI EOP Data\nIAU-76/FK5 ITRF GCRF EOP IAU1980\nIAU-76/FK5 ITRF J2000 EOP IAU1980\nIAU-76/FK5 ITRF MOD EOP IAU1980\nIAU-76/FK5 ITRF TOD EOP IAU1980\nIAU-76/FK5 ITRF TEME EOP IAU1980\nIAU-76/FK5 PEF GCRF EOP IAU1980\nIAU-76/FK5 PEF J2000 Not required¹\nIAU-76/FK5 PEF MOD Not required¹\nIAU-76/FK5 PEF TOD Not required¹\nIAU-76/FK5 PEF TEME Not required¹\nIAU-2006/2010 CIO-based ITRF CIRS EOP IAU2000A\nIAU-2006/2010 CIO-based ITRF GCRF EOP IAU2000A\nIAU-2006/2010 CIO-based TIRS CIRS Not required¹\nIAU-2006/2010 CIO-based TIRS GCRF Not required¹ ²\nIAU-2006/2010 Equinox-based ITRF ERS EOP IAU2000A\nIAU-2006/2010 Equinox-based ITRF MOD06 EOP IAU2000A\nIAU-2006/2010 Equinox-based ITRF MJ2000 EOP IAU2000A\nIAU-2006/2010 Equinox-based TIRS ERS Not required¹ ³\nIAU-2006/2010 Equinox-based TIRS MOD06 Not required¹ ³\nIAU-2006/2010 Equinox-based TIRS MJ2000 Not required¹ ³","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"¹: In this case, UTC will be assumed equal to UT1 to compute the Greenwich Mean Sidereal Time. This is an approximation, but should be sufficiently accurate for some applications. Notice that, if EOP Data is provided, UT1 will be accurately computed.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"²: In this case, the terms that account for the free core nutation and time dependent effects of the Celestial Intermediate Pole (CIP) position with respect to the GCRF will not be available, reducing the precision.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"³: In this case, the terms that corrects the nutation in obliquity and in longitude due to the free core nutation will not be available, reducing the precision.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"note: Note\nIn this function, if EOP corrections are not provided, then MOD and TOD frames will be computed considering the original IAU-76/FK5 theory.  Otherwise, the corrected frame will be used.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_ecef_to_eci(DCM, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_eci(ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_eci(PEF(), J2000(), date_to_jd(1986, 06, 19, 21, 35, 0))\n\nr_ecef_to_eci(PEF(), J2000(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_eci(Quaternion, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_ecef_to_eci(ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\n\nr_ecef_to_eci(TIRS(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0))\n\nr_ecef_to_eci(Quaternion, ITRF(), GCRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)","category":"page"},{"location":"man/ecef_eci/#ECI-to-ECEF","page":"ECI and ECEF","title":"ECI to ECEF","text":"","category":"section"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"One ECI frame can be converted to one ECEF frame using the following function:","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_eci_to_ecef([T,] ECI, ECEF, JD_UTC::Number[, eop]) -> T","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"which has the same characteristics of the function r_ecef_to_eci described in Section ECEF to ECI, but with the inputs ECI  and ECEF swapped.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"note: Note\nThis function actually calls r_ecef_to_eci first and then uses inv_rotation. Hence, it has a slightly overhead on top of r_ecef_to_eci, which should be negligible for both rotation representations that are supported.","category":"page"},{"location":"man/ecef_eci/","page":"ECI and ECEF","title":"ECI and ECEF","text":"r_eci_to_ecef(DCM, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_ecef(GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_ecef(J2000(), PEF(), date_to_jd(1986, 06, 19, 21, 35, 0))\n\nr_eci_to_ecef(J2000(), PEF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_ecef(Quaternion, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau1980)\n\nr_eci_to_ecef(GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)\n\nr_eci_to_ecef(GCRF(), TIRS(), date_to_jd(1986, 06, 19, 21, 35, 0))\n\nr_eci_to_ecef(Quaternion, GCRF(), ITRF(), date_to_jd(1986, 06, 19, 21, 35, 0), eop_iau2000a)","category":"page"},{"location":"man/geodetic_geocentric/#Geodetic-and-Geocentric","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"CurrentModule = SatelliteToolboxTransformations","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"using SatelliteToolboxTransformations","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"There are six functions that can help to convert between geodetic and geocentric representations. Notice that currently all Geodetic representations are based on the WGS84 reference ellipsoid.","category":"page"},{"location":"man/geodetic_geocentric/#ECEF-to-Geocentric","page":"Geodetic and Geocentric","title":"ECEF to Geocentric","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"We can convert a position vector represented in an Earth-Centered, Earth-Fixed frame (ECEF) r_e to the Geocentric latitude, longitude, and distance from Earth's center using the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"ecef_to_geocentric(r_e::AbstractVector{T}) -> NTuple{3, float(T)}","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"which returns a tuple with:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"The Geocentric latitude [rad];\nThe longitude [rad]; and\nThe distance from the Earth's center [m].","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"ecef_to_geocentric([7000, 0, 7000])\n\necef_to_geocentric([0, 0, 7000])\n\necef_to_geocentric([7000, 0, 0])","category":"page"},{"location":"man/geodetic_geocentric/#Geocentric-to-ECEF","page":"Geodetic and Geocentric","title":"Geocentric to ECEF","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"We can convert a Geocentric coordinate (latitude lat [rad], longitude lon [rad], and distance from Earth's center r [m]) to a vector represented in the Earth-Centered, Earth-Fixed (ECEF) frame using the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geocentric_to_ecef(lat::Number, lon::Number, r::Number) -> SVector{3}","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"which returns a 3x1 vector.","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geocentric_to_ecef(0, 0, 7000e3)\n \ngeocentric_to_ecef(pi / 2, 0, 7000e3)\n \ngeocentric_to_ecef(pi / 4, 0, 7000e3)","category":"page"},{"location":"man/geodetic_geocentric/#ECEF-to-Geodetic","page":"Geodetic and Geocentric","title":"ECEF to Geodetic","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"We can convert a position vector represented in an Earth-Centered, Earth-Fixed frame (ECEF) r_e to the Geodetic latitude, longitude, and altitude using the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"ecef_to_geodetic(r_e::AbstractVector{T}) -> NTuple{3, float(T)}","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"which returns a tuple with:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"The Geodetic latitude [rad];\nThe longitude [rad]; and\nThe altitude above the reference ellipsoid [m].","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"ecef_to_geodetic([6378137.0, 0, 0])\n\necef_to_geodetic([0, 6378137.0, 0])\n\necef_to_geodetic([0, 0, 6378137.0])","category":"page"},{"location":"man/geodetic_geocentric/#Geodetic-to-ECEF","page":"Geodetic and Geocentric","title":"Geodetic to ECEF","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"The Geodetic latitude lat [rad], longitude lon [rad], and altitude h [m] can be converted to a vector represented in an ECEF reference frame by the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geodetic_to_ecef(lat::Number, lon::Number, h::Number) -> SVector{3}","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"which returns a 3x1 vector.","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geodetic_to_ecef(0, 0, 0)\n\ngeodetic_to_ecef(deg2rad(-22), deg2rad(-45), 0)","category":"page"},{"location":"man/geodetic_geocentric/#Geocentric-to-Geodetic","page":"Geodetic and Geocentric","title":"Geocentric to Geodetic","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"Given a Geocentric latitude ϕ_gc [rad] and distance from the center of Earth r [m], one can obtain the Geodetic coordinates (Geodetic latitude and altitude above the reference ellipsoid - WGS84) using the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geocentric_to_geodetic(ϕ_gc::Number, r::Number) -> Number, Number","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"in which returns a tuple with two values:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"The Geodetic latitude [rad]; and\nThe altitude above the reference ellipsoid (WGS-84) [m].","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"note: Note\nThe longitude is the same in both Geodetic and Geocentric representations.","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geocentric_to_geodetic(deg2rad(-22), 6378137.0)\n\ngeocentric_to_geodetic(0, 6378137.0)","category":"page"},{"location":"man/geodetic_geocentric/#Geodetic-to-Geocentric","page":"Geodetic and Geocentric","title":"Geodetic to Geocentric","text":"","category":"section"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"Given a Geodetic latitude ϕ_gd [rad] and altitude above the reference ellipsoid h [m], one can obtain the Geocentric coordinates (Geocentric latitude and position from the center of Earth) using the following function:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geodetic_to_geocentric(ϕ_gd::Number, h::Number) -> Number, Number","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"which returns a tuple with two values:","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"The Geocentric latitude [rad]; and\nThe distance from the center of Earth [m].","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"note: Note\nThe longitude is the same in both Geodetic and Geocentric representations.","category":"page"},{"location":"man/geodetic_geocentric/","page":"Geodetic and Geocentric","title":"Geodetic and Geocentric","text":"geodetic_to_geocentric(deg2rad(-22), 0)\n\ngeodetic_to_geocentric(0, 0)","category":"page"},{"location":"#SatelliteToolboxTransformations.jl","page":"Home","title":"SatelliteToolboxTransformations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains transformations that are useful for the SatelliteToolbox.jl ecosystem. Currently, the following algorithms are available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Conversion between ECI and ECEF reference frames (IAU-76/FK5 and IAU-2006/2010A);\nConversion between ECEF and local frames (NED);\nConversion between geodetic and geocentric variables; and\nConversion between time epochs (UTC, UT1, TT).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be installed using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"SatelliteToolboxTransformations\")","category":"page"}]
}
